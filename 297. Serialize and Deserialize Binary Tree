/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    private final String NULL = "NULL";
    private final String separator = " ";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        LinkedList<TreeNode> queue = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        queue.add(root);
        while(!queue.isEmpty()) {
            TreeNode node = queue.pop();
            sb.append(node == null ? NULL : node.val).append(separator);
            if(node != null) {
                queue.add(node.left);
                queue.add(node.right);
            }
        }
        return sb.toString().trim();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length() == 0) return null;
        LinkedList<TreeNode> queue = new LinkedList<>();
        String[] tokens = data.split(separator);
        TreeNode root = new TreeNode(Integer.parseInt(tokens[0]));
        int i = 1;
        queue.add(root);
        while(i < tokens.length && !queue.isEmpty()) {
            TreeNode node = queue.pop();
            String left = tokens[i++];
            String right = tokens[i++];
            if(NULL.equals(left)) {
                node.left = null;
            } else {
                node.left = new TreeNode(Integer.parseInt(left));
            }
            if(NULL.equals(right)) {
                node.right = null;
            } else {
                node.right = new TreeNode(Integer.parseInt(right));
            }
            if(node.left != null) queue.add(node.left);
            if(node.right != null) queue.add(node.right);
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));

/*
Time Complexity - O(N) 
Space Complexity - O(n) or O(h)
*/
