class MyQueue {
    private Stack<Integer> inStack;
    private Stack<Integer> outStack;
    
    /** Initialize your data structure here. */
    public MyQueue() {    
        inStack = new Stack<>();
        outStack = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        inStack.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        moveInStacktoOutStack();
        return outStack.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        moveInStacktoOutStack();
        return outStack.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return inStack.empty() && outStack.empty();
    }
    
    public void moveInStacktoOutStack() {
        if(outStack.empty()) {
            while(!inStack.empty()) {
                outStack.push(inStack.pop());
            }
        }
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */

//  Push - O(1)O(1) per operation, Pop - Amortized O(1)O(1) per operation.

/* Approach - Two Stacks
- Push - O(1) per operation
- Pop - O(1) per operation
=========================================
- Push : Time - O(1), Space - O(n)
- Pop  : Time - O(1)/ O(n) , Space - O(1)
- Empty: Time - O(1), Space - O(1)
- Peek : Time - O(1), Space - O(1)
*/
