https://www.lintcode.com/problem/the-maze/

public class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        // write your code here
        int r  = maze.length;
        int c = maze[0].length;
        boolean[][] visited = new boolean[r][c];

        visited[start[0]][start[1]] = true;

        Queue<int[]> queue = new LinkedList<>();
        queue.offer(start);

        int[][] directions = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        while(!queue.isEmpty()) {
            int[] curr = queue.poll();
            if(curr[0] == destination[0] && curr[1] == destination[1]) {
                return true;
            }

            for(int[] d: directions) {
                int x = curr[0] + d[0];
                int y = curr[1] + d[1];

                while(x >= 0 && y >= 0 && x < r && y < c && maze[x][y] == 0) {
                    x += d[0];
                    y += d[1];
                }

                if(!visited[x-d[0]][y-d[1]]) {
                    queue.offer(new int[]{x-d[0], y-d[1]});
                    visited[x-d[0]][y-d[1]] = true;
                }
            }
        }
        return false;
    }
}
