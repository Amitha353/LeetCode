class Solution {
    boolean[][] visited;
    StringBuilder currIsland;
    
    public int numDistinctIslands(int[][] grid) {
        if(grid.length == 0 || grid[0].length == 0 || grid == null) return 0;
        
        int r = grid.length;
        int c = grid[0].length;
        
        Set<String> uniqueIslands = new HashSet<>();
        visited = new boolean[r][c];
        
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 1) {
                    currIsland = new StringBuilder();
                    dfs(i, j, grid, '0');
                    uniqueIslands.add(currIsland.toString());
                }
            }
        }
        
        return uniqueIslands.size();
    }
    
    public void dfs(int row, int col, int[][] grid, char direction) {
        if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] == 0 || visited[row][col]) return;
        
        grid[row][col] = 0;
        currIsland.append(direction);
        visited[row][col] = true;
        dfs(row-1, col, grid, 'U');
        dfs(row+1, col, grid, 'D');
        dfs(row, col-1, grid, 'L');
        dfs(row, col+1, grid, 'R');
        currIsland.append('0');
    }
}

/*
Complexity Analysis

Let M be the number of rows, and N be the number of columns.

Time Complexity : O(M⋅N).

Space complexity :O(M⋅N).
*/
