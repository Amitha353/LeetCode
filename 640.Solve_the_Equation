public class Solution {
    private String coefficient(String x) {
        if(x.length() > 1 && x.charAt(x.length()-2) >= '0' && x.charAt(x.length()-2) <= '9') 
            return  x.replace("x","");
        return x.replace("x", "1");
    }
    public String solveEquation(String equation) {
        String[] eqns = equation.split("=");
        int lhs = 0, rhs = 0;
        for(String x: eqns[0].split("(?=\\+)|(?=-)")) {
            if(x.indexOf("x") >= 0) {
                lhs += Integer.parseInt(coefficient(x));
            } else {
                rhs -= Integer.parseInt(x);
            }
        }
        for(String x: eqns[1].split("(?=\\+)|(?=-)")) {
            if(x.indexOf("x") >= 0) {
                lhs -= Integer.parseInt(coefficient(x));
            } else {
                rhs += Integer.parseInt(x);
            }
        }
        if(lhs == 0) {
            if(rhs == 0) {
                return "Infinite solutions";
            } else {
                return "No solution";
            }
        } else {
             return "x=" + rhs/lhs;
        }
    }
}

/*Algorithm: Using regex for splitting
1. The equation is split into 2 parts -> LHS and RHS
2. Treat the equation such that we're bringing all the x's on the left hand side and all the rest of the numbers to the right hand side.
    2.1 Every x in the left hand side of the equation is treated positive, while that on the right hand side is treated negative.
    2.2 Every number on the left-hand side is treated as negative, while that on the right hand side is treated as positive.
    2.3 In case of x, need to find the coefficient, if it is just a X, then it's value is 1, else ?X, then the coresponding coefficient needs to be retrieved.
    2.4: Result:
        - Infinite -> lhs and rhs -> 0;
        - No solution -> lhs is 0;
        - unique solution -> rhs / lhs;
*/
