Nearest City
https://leetcode.com/discuss/interview-question/872961/amazon-oa-2020-nearest-city
https://leetcode.com/playground/mNjSTsDZ
https://algo.monster/problems/nearest_cities
https://aonecode.com/amazon-online-assessment-nearest-cities

Amazon has Fulfillment Centers in multiple cities within a large geographic region. The cities are 
arranged on a graph that has beem divided up like an ordinary cartesian plane.
Each city is located at an integer(x, y) coordinate intersection. City names and locations are given 
in the form of three arrays: c, x, and y, which are aligned by the index to rpovide the city name
(c[i]),
and its coordinates , (x[i], y[i]).

Write an algorithm to determine the name of the nearest city that shares either an x or y coordinate 
with the queried city. If no other cities share an x or y coordinate, return NONE.
If two cities have the same distance to the queried city, q[i], consider the one with an 
alphabetically smaller name (i.e. 'ab' < 'aba' < 'abb') as the closest choice.

The distance is denoted on an eucliean place: the difference in x plus the difference in y.

public class Main {
    public static String[] findNearestCities(int numOfCities,String[] cities, int[] xCoordinates,
    int[] yCoordinates,int numOfQueries, String[] queries) {
                                     
        HashMap<String,Map.Entry<String,Integer>> map = new HashMap<>();
        PriorityQueue<Map.Entry<String,Integer>> pq[] = new PriorityQueue[numOfCities];
        HashMap<String,Integer> map1 = new HashMap<>();
        for(int i = 0;i<cities.length;i++){
            map1.put(cities[i],i);
        }
        for(int i = 0;i<pq.length;i++)
            pq[i] = new PriorityQueue<>(
            (a,b) -> a.getValue()-b.getValue()!=0?a.getValue()-b.getValue():
            a.getKey().compareTo(b.getKey()));
        for(int i = 0;i<xCoordinates.length;i++){
            for(int j = 0;j<xCoordinates.length;j++){
                if(i == j)
                    continue;
                if(xCoordinates[i] == xCoordinates[j]){
                    int x = Math.abs(xCoordinates[i] - xCoordinates[j]);
                    int y = Math.abs(yCoordinates[i] - yCoordinates[j]);
                    int d = x+y;
                    HashMap<String,Integer> m = new HashMap<>();
                    m.put(cities[j],d);
                    for(Map.Entry<String,Integer> e : m.entrySet())
                        pq[i].offer(e);
                }
            }
        }
        for(int i = 0;i<yCoordinates.length;i++){
            for(int j = 0;j<yCoordinates.length;j++){
                if(i == j)
                    continue;
                if(yCoordinates[i] == yCoordinates[j]){
                    int x = Math.abs(xCoordinates[i] - xCoordinates[j]);
                    int y = Math.abs(yCoordinates[i] - yCoordinates[j]);
                    int d = x+y;
                    HashMap<String,Integer> m = new HashMap<>();
                    m.put(cities[j],d);
                    for(Map.Entry<String,Integer> e : m.entrySet())
                        pq[i].offer(e);
                }
            }
        }
        String res[] = new String[numOfQueries];
        for(int i = 0;i<queries.length;i++){
            int idx = map1.get(queries[i]);
            if(!pq[idx].isEmpty()){
                Map.Entry<String,Integer> e = pq[idx].peek();
                res[i] = e.getKey();
            }
            else res[i]= null; "NONE";
        }
        return res;                            
    }
    public static void main(String[] args) {
        int numOfCities = 6;
        String[] cities = {"green","yellow","red","blue","grey","pink"};
        int[] xCoordinates = {10,20,15,30,10,15} ;
        int[] yCoordinates = {30,25,30,40,25,25};
        int numOfQueries = 4;
        String[] queries = {"grey","blue","red","pink"};
        String res[] = findNearestCities(numOfCities,cities,xCoordinates,yCoordinates,
        numOfQueries,queries);
        for(String s : res)
            System.out.print(s + " ");
    }
}
------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;

class City {
   String name;
   int x;
   int y;
}

public class NearestCities {
   public static Comparator<? super City> Y_COMPARATOR = (a, b) -> {
      int v = Integer.compare(a.y, b.y);
      if (v == 0) {
         v = a.name.compareTo(b.name);
      }

      return v;
   };
   public static Comparator<? super City> X_COMPARATOR = (a, b) -> {
      int v = Integer.compare(a.x, b.x);
      if (v == 0) {
         v = a.name.compareTo(b.name);
      }

      return v;
   };

   public static String[] findNearestCities(int numOfPoints, String[] points, int[] xCoordinates, int[] yCoordinates,
         int numOfQueries, String[] queries) {
      HashMap<Integer, TreeSet<City>> xToYs = new HashMap<>();
      HashMap<Integer, TreeSet<City>> yToXs = new HashMap<>();
      HashMap<String, City> nameToCity = new HashMap<>();

      for (int i = 0; i < numOfPoints; i++) { // O(p log(p))
         City c = new City();
         c.name = points[i];
         c.x = xCoordinates[i];
         c.y = yCoordinates[i];

         // Add to maps
         nameToCity.put(c.name, c);
         xToYs.putIfAbsent(c.x, new TreeSet<>(Y_COMPARATOR));
         xToYs.get(c.x).add(c); // O (log p) in adding to TreeSet
         yToXs.putIfAbsent(c.y, new TreeSet<>(X_COMPARATOR));
         yToXs.get(c.y).add(c); // O (log p) in adding to TreeSet
      }

      String[] result = new String[numOfQueries];
      for (int i = 0; i < numOfQueries; i++) { // O (q log p)
         City c = nameToCity.get(queries[i]);
         if (c == null)
            continue;

         ArrayList<City> neighbors = new ArrayList<City>(); 
         neighbors.add(xToYs.get(c.x).lower(c)); // O(log p)
         neighbors.add(xToYs.get(c.x).higher(c)); // O(log p)
         neighbors.add(yToXs.get(c.y).lower(c)); // O(log p)
         neighbors.add(yToXs.get(c.y).higher(c)); // O(log p)

         result[i] = getClosestCity(c, neighbors); // At max 4 so O(1)

      }
      return result;
   }

   private static String getClosestCity(City origin, List<City> neighbors) {
      City closestCity = null;
      int closestDistance = Integer.MAX_VALUE;
      for (City c : neighbors) {
         if (c != null) {
            int d = getDistance(origin, c);
            if (d < closestDistance) {
               closestCity = c;
               closestDistance = d;
            }
         }
      }

      return closestCity != null ? closestCity.name : null;
   }

   private static int getDistance(City a, City b) {
      return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
   }

   public static void test(int numOfPoints, String[] points, int[] xCoordinates, int[] yCoordinates, int numOfQueries,
         String[] queries) {
      String[] out = findNearestCities(numOfPoints, points, xCoordinates, yCoordinates, numOfQueries, queries);
      System.out.println(Arrays.toString(out));
   }

   public static void runner() {
      System.out.println("NearestCities");
      test(3, new String[] { "c1", "c2", "c3" }, new int[] { 3, 2, 1 }, new int[] { 3, 2, 3 }, 3,
            new String[] { "c1", "c2", "c3" });
      test(5, new String[] { "p1", "p2", "p3", "p4", "p5" }, new int[] { 10, 20, 30, 40, 50 },
            new int[] { 10, 20, 30, 40, 50 }, 5, new String[] { "p1", "p2", "p3", "p4", "p5" });
      test(5, new String[] { "p1", "p2", "p3", "p4", "p5" }, new int[] { 10, 20, 10, 40, 50 },
            new int[] { 10, 20, 10, 10, 50 }, 5, new String[] { "p1", "p2", "p3", "p4", "p5" });
   }
}
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
https://aonecode.com/amazon-online-assessment-nearest-cities

import java.util.*;
import java.io.*;
import java.lang.*;

//If no other cities share an x or y coordinate, return null
public class Solution {
    public String[] findNearestCities(int numOfPoints,
                                 String[] points,
                                 int[] xCoordinates,
                                 int[] yCoordinates,
                                 int numOfQueries,
                                 String[] queries) {
                                     
        HashMap<String,Map.Entry<String,Integer>> map = new HashMap<>();
        PriorityQueue<Map.Entry<String,Integer>> pq[] = new PriorityQueue[numOfPoints];
        HashMap<String,Integer> map1 = new HashMap<>();
        for(int i = 0;i<points.length;i++){
            map1.put(points[i],i);
        }
        for(int i = 0;i<pq.length;i++)
            pq[i] = new PriorityQueue<>(
            (a,b) -> a.getValue()-b.getValue()!=0?a.getValue()-b.getValue():
            a.getKey().compareTo(b.getKey()));
        for(int i = 0;i<xCoordinates.length;i++){
            for(int j = 0;j<xCoordinates.length;j++){
                if(i == j)
                    continue;
                if(xCoordinates[i] == xCoordinates[j]){
                    int x = Math.abs(xCoordinates[i] - xCoordinates[j]);
                    int y = Math.abs(yCoordinates[i] - yCoordinates[j]);
                    int d = x+y;
                    HashMap<String,Integer> m = new HashMap<>();
                    m.put(points[j],d);
                    for(Map.Entry<String,Integer> e : m.entrySet())
                        pq[i].offer(e);
                }
            }
        }
        for(int i = 0;i<yCoordinates.length;i++){
            for(int j = 0;j<yCoordinates.length;j++){
                if(i == j)
                    continue;
                if(yCoordinates[i] == yCoordinates[j]){
                    int x = Math.abs(xCoordinates[i] - xCoordinates[j]);
                    int y = Math.abs(yCoordinates[i] - yCoordinates[j]);
                    int d = x+y;
                    HashMap<String,Integer> m = new HashMap<>();
                    m.put(points[j],d);
                    for(Map.Entry<String,Integer> e : m.entrySet())
                        pq[i].offer(e);
                }
            }
        }
        String res[] = new String[numOfQueries];
        for(int i = 0;i<queries.length;i++){
            int idx = map1.get(queries[i]);
            if(!pq[idx].isEmpty()){
                Map.Entry<String,Integer> e = pq[idx].peek();
                res[i] = e.getKey();
            }
            else res[i]= null;
        }
        return res; 
    }
}

Time Complexity : O(N)
Space Complexity : O(N)
