https://algo.monster/problems/optimal_utilization

import java.util.*;

public class Main
{
	public static void main(String[] args) {
		System.out.println("Hello World");
		List<int[]> a = new ArrayList<>();
		a.add(new int[]{1, 2});
		a.add(new int[]{2, 4});
		a.add(new int[]{3, 6});
		
		List<int[]> b = new ArrayList<>();
		b.add(new int[]{1, 2});
		
		List<int[]> result = getPairs(a, b, 7); 
		for(int[] res: result) {
		    System.out.print("[" +res[0] + " , " + res[1] + "] ");
		}
		System.out.println();
		a = new ArrayList<>();
		a.add(new int[]{1, 3});
		a.add(new int[]{2, 5});
		a.add(new int[]{3, 7});
		a.add(new int[]{4, 10});
		
	    b = new ArrayList<>();
		b.add(new int[]{1, 2});
		b.add(new int[]{2, 3});
		b.add(new int[]{3, 4});
		b.add(new int[]{4, 5});
		
		result = getPairs(a, b, 10); 
		for(int[] res: result) {
		    System.out.print("[" +res[0] + " , " + res[1] + "] ");
		}
		System.out.println();
		
		a = new ArrayList<>();
		a.add(new int[]{1, 8});
		a.add(new int[]{2, 7});
		a.add(new int[]{3, 14});

	    b = new ArrayList<>();
		b.add(new int[]{1, 5});
		b.add(new int[]{2, 10});
		b.add(new int[]{3, 14});

		result = getPairs(a, b, 20); 
		for(int[] res: result) {
		    System.out.print("[" +res[0] + " , " + res[1] + "] ");
		}
		System.out.println();
		
		a = new ArrayList<>();
		a.add(new int[]{1, 8});
		a.add(new int[]{2, 15});
		a.add(new int[]{3, 9});

	    b = new ArrayList<>();
		b.add(new int[]{1, 8});
		b.add(new int[]{2, 11});
		b.add(new int[]{3, 12});

		result = getPairs(a, b, 20); 
		for(int[] res: result) {
		    System.out.print("[" +res[0] + " , " + res[1] + "] ");
		}
		System.out.println();
	}
	
	public static  List<int[]> getPairs(List<int[]> a, List<int[]> b, int target) {
        Collections.sort(a, (i,j) -> i[1] - j[1]);
        Collections.sort(b, (i,j) -> i[1] - j[1]);
        List<int[]> result = new ArrayList<>();
        int max = Integer.MIN_VALUE;
        int m = a.size();
        int n = b.size();
        int i =0;
        int j =n-1;
        while(i<m && j >= 0) {
            int sum = a.get(i)[1] + b.get(j)[1];
            if(sum > target) {
                 --j;
            } else {
                if(max <= sum) {
                    if(max < sum) {
                        max = sum;
                        result.clear();
                    }
                    result.add(new int[]{a.get(i)[0], b.get(j)[0]});
                    int index = j-1;
                    while(index >=0 && b.get(index)[1] == b.get(index+1)[1]) {
                         result.add(new int[]{a.get(i)[0], b.get(index--)[0]});
                    }
                }
                ++i;
            }
        }
        return result;
	}
}
