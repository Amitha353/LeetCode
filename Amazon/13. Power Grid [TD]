https://www.youtube.com/watch?v=B2J89zrWA0g

Your team at amazon is overseeing the design of a new high-efficiency data center at HQ2. A power grid needs to be generated for supplying power to its servers. All servers in the grid have to be connected such that they have access to power. The cost of connections between different servers varies.

Assume that there are no ties, names of servers are unique, connections are directionless, there is at most one connection between a pair of servers, all costs are greater than zero, and a server does not connect to itself.

Write an algotithm to minimize the cost of connecting all servers in the power grid.

Input:
- num, an integer representing number of connections.
- connections, representing a list of connections when each element of the list consists of two servers and the cost of connection between the servers.

Note:
The cost of connection between the servers is always greater than 0.

Example:
Input

num = 5
connection = 
  [[A, B, 1],
  [B, C, 4],
  [B, D, 6],
  [D, E, 5],
  [C, E, 1]]
  
 Output:
 
 [[A,B,1],
 [B,C,4],
 [C,E,1],
 [D,E,5]]

import java.util.*;

public class Power_Grid {

    public static void main(String[] args) {
        List<Edge> edges = new ArrayList<>();
        edges.add(new Edge('A', 'B', 1));
        edges.add(new Edge('B', 'C', 4));
        edges.add(new Edge('B', 'D', 6));
        edges.add(new Edge('D', 'E', 5));
        edges.add(new Edge('C', 'E', 1));

        System.out.println(solve(edges, 5));
    }

    private static List<Edge> solve(List<Edge> edges, int vertices) {
        Queue<Edge> pq = new PriorityQueue<>((a, b) -> {return a.cost - b.cost;});
        Map<Character, Set<Edge>> map = new HashMap<>();

        int minCost = Integer.MAX_VALUE;
        Edge minEdge = null;
        for  (Edge e : edges) {
            if (!map.containsKey(e.from)) map.put(e.from, new HashSet<>());
            if (!map.containsKey(e.to)) map.put(e.to, new HashSet<>());
            map.get(e.from).add(e);
            map.get(e.to).add(e);
            if (e.cost < minCost) {
                minCost = e.cost;
                minEdge = e;
            }
        }

        Set<Character> set = new HashSet<>();
        List<Edge> res = new ArrayList<>();
        pq.add(minEdge);

        while (set.size() != vertices) {
            Edge e = pq.poll();
            if (set.contains(e.to) && set.contains(e.from)) continue;

            set.add(e.to);
            set.add(e.from);
            res.add(e);

            Set<Edge> neighbors = new HashSet<>();
            if (map.containsKey(e.to)) {
                neighbors.addAll(map.get(e.to));
                map.remove(e.to);
            }

            if (map.containsKey(e.from)) {
                neighbors.addAll(map.get(e.from));
                map.remove(e.from);
            }

            for (Edge n : neighbors)
                pq.add(n);
        }

        return res;
    }

    private static class Edge {
        public Character from, to;
        public int cost;

        public Edge(Character from, Character to, int cost) {
            this.from = from;
            this.to = to;
            this.cost = cost;
        }

        @Override
        public String toString() {
            return "[" + from + ", " + to + ", " + cost + "]";
        }
    }
}
