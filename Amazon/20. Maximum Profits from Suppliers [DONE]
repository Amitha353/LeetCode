Amazon Basics has several suppliers for its products. For each of the products, the stock is 
represented by a list of a number of items for each supplier. As items are purchased, the supplier 
raises the price by 1 per item purchased. Let’s assume Amazon’s profit on any single item is the same
as the number of items the supplier has left. For example, if a supplier has 4 items, Amazon’s profit
on the first item sold is 4, then 3, then 2 and the profit of the last one is 1.

Given a list where each value in the list is the number of the item at a given supplier and also 
given the number of items to be ordered, write an algorithm to find the highest profit that can be 
generated for the given product.

Input
The input to the function/method consists on three arguments:

numSuppliers, an integer representing the number of suppliers;

inventory, a list of long integers representing the value of the item at a given supplier;

order, a long integer representing the number of items to be ordered.

Output

Return a long integer representing the highest profit that can be generated for the given product.

Constraints

1 <= numSuppliers <= 10^5

1 <= inventory[i] <= 10 ^ 5

0 <= i < numSuppliers

1 <= orders <= sum of inventory

Example1

Input:

numSuppliers = 2

inventory = [3,5]

order = 6

Output:

19
------------------------------------------------------------------
Check if complexity : O(N)
https://discuss.codechef.com/t/help-amazon-2021-coding-question/81075
https://aonecode.com/amazon-online-assessment-amazon-find-the-highest-profit
https://ideone.com/HDju9l

Similar to 8. Find Total Profit
https://github.com/Amitha353/Leetcode/blob/master/Amazon/8.%20Find%20the%20Highest%20Profit%20%5BC1%5D
--------------------------------------------------------------------------------

import java.util.*;

public class HelloWorld{

     public static void main(String []args){
        System.out.println("Hello World");
        System.out.println(findProfit(2, new int[]{3, 5}, 6)); //expected: 19 // output: 19
        System.out.println(findProfit(2, new int[]{2, 5}, 4)); //expected: 14 // output: 14
        System.out.println(findProfit(5, new int[]{2, 8, 4, 10, 6}, 20)); //expected: 110 //output: 110
     }
     
     public static int findProfit(int numSuppliers, int[] inventory, int order) {
       // WRITE YOUR BRILLIANT CODE HERE
        int highest = 0;
        int profit = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i: inventory) {
            map.put(i, map.getOrDefault(i, 0)+1);
            if(highest < i) {
                highest = i;
            }
        }
        
        while(order > 0 && !map.isEmpty()) {
            int hFreq = map.get(highest);
            if(order > hFreq) {
                profit += hFreq * highest;
                order -= hFreq;
                map.remove(highest);
                if(map.containsKey(highest-1)) {
                    map.put(highest-1, map.get(highest-1)+hFreq);
                } else {
                    map.put(highest-1, hFreq);
                }
            } else {
                profit += order * highest;
                order = 0;
            }
            highest--;
        }
        return profit;
    }
}

/*
Time Complexity : O(N) - map has maximum N items and while loop runs until map is empty
Space Complexity : (N) - making use of HashMap
*/
