https://www.1point3acres.com/bbs/interview/amazon-software-engineer-532369.html
https://docs.google.com/document/d/1Wvsz24KQ92mTYCW34FRFasKWCHi0XXla2JTh8EDtVNo/edit#
-------------------------------------------------------------------------------------------
In Amazon's sort center a computer system decides what packages are to be loaded on what trucks.
All rooms and spaces are abstracted into space units which is represented as an integer 
For each type of truck they have different space units
For each package they will be occupying different space units
As a software development engineer in sort centers you will need to write a method:
Given truck space units and a list of product space units find out exactly TWO products that fit
into the truck
You will also implement an internal rule that whose combined space will leave exactly 30 space units on the truck

ExampleInput:
truckSpace=90
packagesSpace=[1, 10, 25, 35, 60]

Output:
[2, 3]

Explanation:
Given a truck of 90 space units a list of packages space units [1, 10, 25, 35, 60]
Your method should select the third(ID-2) and fourth(ID-3) package since you have to reserve exactly 30 space units.

-------------------------------------------------------------------------------------------
package algorithmpractice;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TruckPackage {

	public static void main(String[] args) {
		Soln sol = new Soln();
		sol.truckSpacePackage();
		System.out.println("--------------------------------------------");
		Soln2 sol2 = new Soln2();
		sol2.truckSpacePackage2();
	}
}

class Soln {
	public void truckSpacePackage() {
		PairInt result = solve(90, 5, new int[] { 1, 10, 25, 35, 60 });
		System.out.println(result.first + ", " + result.second);
		System.out.println();
		result = solve(90, 6, new int[] { 1, 10, 25, 35, 60, 50 });
		System.out.println(result.first + ", " + result.second);
		System.out.println();
		result = solve(110, 6, new int[] { 5, 60, 20, 10, 70, 40 });
		System.out.println(result.first + ", " + result.second);
		System.out.println();
		result = solve(30, 5, new int[] { 1, 10, 25, 35, 60 });
		System.out.println(result.first + ", " + result.second);
		System.out.println();
		result = solve(200, 5, new int[] { 100, 100, 90, 80, 60 });
		System.out.println(result.first + ", " + result.second);
		System.out.println();
	}

	PairInt solve(int truckSpace, int numOfPackages, int[] packagesSpace) {
		Map<Integer, Integer> map = new HashMap<>();
		int max = Integer.MIN_VALUE;
		truckSpace -= 30;
		PairInt result = new PairInt(-1, -1);
		for (int i = 0; i < numOfPackages; i++) {
			int val = packagesSpace[i];
			if (map.containsKey(truckSpace - val)) {
				int cMax = val > truckSpace - val ? val : truckSpace - val;
				if (cMax > max) {
					max = cMax;
					result.first = map.get(truckSpace - val);
					result.second = i;
				}
			}
			map.putIfAbsent(val, i);
		}
		return result;
	}
}

class PairInt {
	int first, second;

	PairInt() {
	}

	PairInt(int first, int second) {
		this.first = first;
		this.second = second;
	}
}

/////////////////////////////////////////////////////////
class Soln2 {
	public void truckSpacePackage2() {
		List<Integer> result = solve(90, 5, new int[] { 1, 10, 25, 35, 60 });
		System.out.println(result.get(0) + ", " + result.get(1));
		System.out.println();
		result = solve(90, 6, new int[] { 1, 10, 25, 35, 60, 50 });
		System.out.println(result.get(0) + ", " + result.get(1));
		System.out.println();
		result = solve(110, 6, new int[] { 5, 60, 20, 10, 70, 40 });
		System.out.println(result.get(0) + ", " + result.get(1));
		System.out.println();
		result = solve(30, 5, new int[] { 1, 10, 25, 35, 60 });
		System.out.println(result.get(0) + ", " + result.get(1));
		System.out.println();
		result = solve(200, 5, new int[] { 100, 100, 90, 80, 60 });
		System.out.println(result.get(0) + ", " + result.get(1));
		System.out.println();
	}

	List<Integer> solve(int truckSpace, int numOfPackages, int[] packagesSpace) {
		Map<Integer, Integer> map = new HashMap<>();
		int max = Integer.MIN_VALUE;
		truckSpace -= 30;
		Integer[] result = new Integer[] { -1, -1 };
		for (int i = 0; i < numOfPackages; i++) {
			int val = packagesSpace[i];
			if (map.containsKey(truckSpace - val)) {
				int cMax = val > truckSpace - val ? val : truckSpace - val;
				if (cMax > max) {
					max = cMax;
					result[0] = map.get(truckSpace - val);
					result[1] = i;
				}
			}
			map.putIfAbsent(val, i);
		}
		return Arrays.asList(result);
	}
}
// Time Complexity - O(N) // Going through all the packageSpace elements
// Space Complexity - O(N) // HashMap
