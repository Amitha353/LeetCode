package algorithmpractice;

import java.util.Arrays;

public class teststringsplit {

	public static void main(String[] args) {
		Solution sol = new Solution();
		System.out.println("3175 : " + sol.countPrimeStrings("3175"));
		System.out.println("11373 : " + sol.countPrimeStrings("11373"));
		System.out.println("31173 : " + sol.countPrimeStrings("31173"));
	}
}

class Solution {

	public int countPrimeStrings(String s) {
		boolean[] sieve = buildSieve();
		int result = solve(s, sieve);
		return result;
	}

	int solve(String s, boolean[] primes) {
		int mod = 1000000007;
		int n = s.length();
		int[] dp = new int[n + 1];
		dp[0] = 1;

		for (int i = 1; i <= n; i++) {
			if (s.charAt(i - 1) != '0') {
				int idx1 = Integer.parseInt(s.substring(i - 1, i));
				if (primes[idx1]) {
					dp[i] = dp[i - 1];
				}
			}

			if (i - 2 >= 0 && s.charAt(i - 2) != '0') {
				int idx2 = Integer.parseInt(s.substring(i - 2, i));
				if (primes[idx2]) {
					dp[i] = (dp[i] + dp[i - 2]) % mod;
				}
			}

			if (i - 3 >= 0 && s.charAt(i - 3) != '0') {
				int idx3 = Integer.parseInt(s.substring(i - 3, i));
				if (primes[idx3]) {
					dp[i] = (dp[i] + dp[i - 3]) % mod;
				}
			}
		}
		return dp[n];
	}

	public boolean[] buildSieve() {
		boolean[] sieve = new boolean[1001];
		Arrays.fill(sieve, true);
		sieve[0] = sieve[1] = false;

		for (int i = 2; i * i <= 1001; i++) {
			if (sieve[i] == true) {
				for (int j = i * i; j < 1001; j += i) {
					sieve[j] = false;
				}
			}
		}
		return sieve;
	}
}
