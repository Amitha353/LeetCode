// https://leetcode.com/problems/connecting-cities-with-minimum-cost/

class Solution {
        int[] par = null;
    public int minimumCost(int N, int[][] connections) {
      par = new int[N + 1];
        for(int i = 1; i <= N; i++) par[i] = i;
        PriorityQueue<int[]> heap = new PriorityQueue<int[]>(Comparator.comparingInt(a -> a[2]));
        Collections.addAll(heap, connections);
        int ans = 0;
        while (!heap.isEmpty()){
            int[] current = heap.poll();
            int c1 = current[0], c2 = current[1], cost = current[2];
            int par_c1 = find(c1), par_c2 = find(c2);
            if(par_c1 == par_c2) continue;
            union(par_c1, par_c2);
            ans += cost;
        }
        int count = 0;
        for(int i = 1; i <= N; i++){
            if(par[i] == i) count += 1;
        }
        if(count > 1) return -1;
        return ans;
    }

    private int find(int i){
        if(par[i] != i) return find(par[i]);
        return par[i];
    }

    private void union(int x, int y){
        par[find(y)] = find(x);
    }
}
