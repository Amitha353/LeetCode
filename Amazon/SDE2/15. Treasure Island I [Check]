//https://aonecode.com/amazon-online-assessment-questions#t

import java.util.LinkedList;
import java.util.Queue;

public class TreasureIslandI {

	public static void main(String[] args) {
		char[][] island = new char[][] { { 'O', 'O', 'O', 'O' }, { 'D', 'O', 'D', 'O' }, { 'O', 'O', 'O', 'O' },
				{ 'X', 'D', 'D', 'O' } };
		int result = treasureIsland(island);
		System.out.println(result);
	}

	private static int treasureIsland(char[][] island) {
		if (island == null || island.length == 0)
			return 0;

		int steps = 0;
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int[] { 0, 0 });
		boolean[][] visited = new boolean[island.length][island[0].length];
		visited[0][0] = true;
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		// bfs
		while (!queue.isEmpty()) {

			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int[] coordinate = queue.poll();
				int x = coordinate[0];
				int y = coordinate[1];
				if (island[x][y] == 'X')
					return steps;

				for (int[] dir : dirs) {
					int newX = x + dir[0];
					int newY = y + dir[1];

					if (newX >= 0 && newX < island.length && newY >= 0 && newY < island[0].length
							&& island[newX][newY] != 'D' && !visited[newX][newY]) {
						queue.add(new int[] { newX, newY });
						visited[newX][newY] = true;
					}
				}
			}
			steps++;
		}
		return 0;
	}

}
