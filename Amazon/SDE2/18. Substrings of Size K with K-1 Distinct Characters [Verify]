// https://algo.monster/problems/substrings_of_size_K_with_K_distinct_chars

===================================================================================================================================
import java.util.*;
class Solution {
    public static String[] subString(String s, int k){
       // WRITE YOUR BRILLIANT CODE HERE
        int l = 0, r = 1;
        Set<String> set = new LinkedHashSet<>();
        
        while(r < s.length()) {
            if(r-l+1 < k) {
                if(s.charAt(l) == s.charAt(r)) {
                    l++;
                    r = l+1;
                } else {
                    r++;
                }
            } else if(r-l+1 == k) {
                String temp = s.substring(l, r);
                if(temp.indexOf(s.charAt(r)) == -1) {
                    set.add(s.substring(l, r+1));
                }
                l++;
            }
        }
        
        String[] result = new String[set.size()];
        int idx = 0;
        for(String res: set) {
            result[idx++] = res;
        }
        
        return result;
    }
  public static void main(String[] args){
      Scanner scanner = new Scanner(System.in);
      String s = scanner.nextLine().trim();
      int k = Integer.parseInt(scanner.nextLine());
      scanner.close();
      System.out.println(String.join(" ", subString(s,k)));
  }
}

===================================================================================================================================
import java.util.*;
class Solution {
    public static String[] subString(String s, int k){
       // WRITE YOUR BRILLIANT CODE HERE
        Set<String> found = new LinkedHashSet<>();
        HashMap<Character, Integer> occur = new HashMap<>();
        int start = 0;
        int end = 0;
        while (end < s.length()) {
            char ch = s.charAt(end);
            int newStart = occur.getOrDefault(ch, end - k);
            while (start <= newStart) {
                occur.remove(s.charAt(start++));
            }
            occur.put(ch, end++);
            if (end - start < k)
                continue;
            String sub = s.substring(start, end);
            if (!found.contains(sub)) {
                found.add(sub);
            }
        }
        int n = found.size(); 
        String arr[] = new String[n]; 
  
        int i = 0; 
        for (String x : found) 
            arr[i++] = x; 
        return arr;
    }
  public static void main(String[] args){
      Scanner scanner = new Scanner(System.in);
      String s = scanner.nextLine().trim();
      int k = Integer.parseInt(scanner.nextLine());
      scanner.close();
      System.out.println(String.join(" ", subString(s,k)));
  }
}

=================================================================================================
import java.util.*;
class Solution {
    public static String[] subString(String s, int k){
       // WRITE YOUR BRILLIANT CODE HERE
        LinkedHashSet<String> set = new LinkedHashSet<>();
		for(int i =0;i<s.length()-k+1;i++) {
			StringBuilder sb = new StringBuilder();
			String st = "";
			for(int j=i;j<i+k;j++) {
				if(st.indexOf(s.charAt(j))!=-1) {
					break;
				}
				else {
					st = st+s.charAt(j);
				}	
			}
			if(st.length()==k){
				set.add(st);
			}
		}
        int n = set.size(); 
        String arr[] = new String[n]; 
  
        int i = 0; 
        for (String x : set) 
            arr[i++] = x; 
        return arr;
    }
  public static void main(String[] args){
      Scanner scanner = new Scanner(System.in);
      String s = scanner.nextLine().trim();
      int k = Integer.parseInt(scanner.nextLine());
      scanner.close();
      System.out.println(String.join(" ", subString(s,k)));
  }
}
