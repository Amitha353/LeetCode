// https://leetcode.com/discuss/interview-question/1061306/amazon-oa-sde-experienced-canada-cloud-front-caching
// BFS

import java.util.*;

public class HelloWorld{

     public static void main(String []args){
         Solution sol = new Solution();
         int[][] edges1 = {{1, 2}, {1, 3}, {2, 4}, {3, 5}, {7, 8}};
         System.out.println(sol.getEfficiencyOfCloudFrontCaching(10, edges1));
         int[][] edges2 = {{1, 2}, {1, 4}};
         System.out.println(sol.getEfficiencyOfCloudFrontCaching(4, edges2));
         int[][] edges3 = {{8, 1}, {5, 8}, {7, 3}, {8, 6}};
         System.out.println(sol.getEfficiencyOfCloudFrontCaching(8, edges3));
     }
}

class Solution {
    Map<Integer, List<Integer>> map;
    boolean[] visited;
    
    public int getEfficiencyOfCloudFrontCaching(int N, int[][] edges) {
        map = new HashMap<>();
        visited = new boolean[N];
        for (int i=0; i<edges.length; ++i) {
            int src = edges[i][0]-1, dest = edges[i][1]-1;
            if (!map.containsKey(src)) map.put(src, new ArrayList<>());
            if (!map.containsKey(dest)) map.put(dest, new ArrayList<>());
            map.get(src).add(dest);
            map.get(dest).add(src);
        }

        int res = 0;
        for (int i=0; i<N; ++i) {
            if (!visited[i]) res += helper(i);
        }
        return res;
    }
    
    private int helper(int start) {
        Queue<Integer> q = new LinkedList<>();
        q.offer(start);
        visited[start] = true;
        int cnt = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            cnt++;
            if (!map.containsKey(cur)) continue;
            for (int next : map.get(cur)) {
                if (!visited[next]) {
                    q.offer(next);
                    visited[next] = true;
                }
            }
        }
        return (int)(Math.ceil(Math.sqrt(cnt)));
    }
}
