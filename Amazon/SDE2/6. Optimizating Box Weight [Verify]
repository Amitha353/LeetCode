// https://aonecode.com/amazon-online-assessment-optimizing-box-weight
// https://algo.monster/problems/optimizing_box_weights
// https://stackoverflow.com/questions/66091385/optimizing-box-weights-
// DP

import java.util.*;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

class Solution {
    static int minElements = Integer.MAX_VALUE;
    static int maxSum = 0;
    static List<Integer> res = null;
    public static List<Integer> optimizingBoxWeights(List<Integer> arr) {
        // WRITE YOUR BRILLIANT CODE HERE
        Map<Integer, Integer> map = new HashMap<>();
        int totalSum = 0;
        for(int i: arr){
            totalSum+=i;
            map.put(i, map.getOrDefault(i, 0)+1);
        }

        //System.out.println(map);
        List<Map.Entry<Integer, Integer>> list = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            list.add(entry);
        }

        helper(list, 0, 0, totalSum, new ArrayList<>());
        return res;
    }
    
    private static void helper(List<Map.Entry<Integer, Integer>> list, int index, int currSum, int totalSum, List<Integer> curr){
        //System.out.println(curr + " : " +  currSum + " : " +totalSum + " : " + (currSum > totalSum - currSum) + " : " + maxSum );

        if(currSum > totalSum - currSum){
            if(minElements > curr.size()){
                minElements = curr.size();
                res = new ArrayList<>(curr);
                maxSum = currSum;
            } else if (minElements == curr.size()){
                if(currSum > maxSum){
                    minElements = curr.size();
                    res = new ArrayList<>(curr);
                    maxSum = currSum;
                }
            }
            return;
        }

        if(index > list.size()-1)
            return;

        Map.Entry<Integer, Integer> entry = list.get(index);
        List<Integer> temp = new ArrayList<>(curr);
        for(int i=0;i<entry.getValue();i++){
            temp.add(entry.getKey());
        }
        helper(list, index+1, currSum + (entry.getValue() * entry.getKey()), totalSum, temp);
        helper(list, index+1, currSum, totalSum, curr);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> arr = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        scanner.close();
        List<Integer> res = optimizingBoxWeights(arr);
        System.out.println(res.stream().map(String::valueOf).collect(Collectors.joining(" ")));
    }
}


/*

Combination Sum : https://leetcode.com/problems/combination-sum/solution/
Complexity Analysis

Let NN be the number of candidates, TT be the target value, and MM be the minimal value among the candidates.

Time Complexity: \mathcal{O}(N^{\frac{T}{M}+1})O(N 
M
T
​	
 +1
 )

As we illustrated before, the execution of the backtracking is unfolded as a DFS traversal in a n-ary tree. The total number of steps during the backtracking would be the number of nodes in the tree.

At each node, it takes a constant time to process, except the leaf nodes which could take a linear time to make a copy of combination. So we can say that the time complexity is linear to the number of nodes of the execution tree.

Here we provide a loose upper bound on the number of nodes.

First of all, the fan-out of each node would be bounded to NN, i.e. the total number of candidates.

The maximal depth of the tree, would be \frac{T}{M} 
M
T
​	
 , where we keep on adding the smallest element to the combination.

As we know, the maximal number of nodes in N-ary tree of \frac{T}{M} 
M
T
​	
  height would be N^{\frac{T}{M}+1}N 
M
T
​	
 +1
 .

Note that, the actual number of nodes in the execution tree would be much smaller than the upper bound, since the fan-out of the nodes are decreasing level by level.

Space Complexity: \mathcal{O}(\frac{T}{M})O( 
M
T
​	
 )

We implement the algorithm in recursion, which consumes some additional memory in the function call stack.

The number of recursive calls can pile up to \frac{T}{M} 
M
T
​	
 , where we keep on adding the smallest element to the combination. As a result, the space overhead of the recursion is \mathcal{O}(\frac{T}{M})O( 
M
T
​	
 ).

In addition, we keep a combination of numbers during the execution, which requires at most \mathcal{O}(\frac{T}{M})O( 
M
T
​	
 ) space as well.

To sum up, the total space complexity of the algorithm would be \mathcal{O}(\frac{T}{M})O( 
M
T
​	
 ).

Note that, we did not take into the account the space used to hold the final results for the space complexity.
*/
