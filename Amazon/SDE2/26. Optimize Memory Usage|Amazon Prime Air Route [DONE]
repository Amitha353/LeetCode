// https://aonecode.com/amazon-online-assessment-oa2-optimize-memory-usage
// https://algo.monster/problems/amazon_oa_prime_air_route
// https://leetcode.com/discuss/interview-question/823550/amazon-oa-2020-optimize-memory-usage

import java.util.*;

public class Solution {
    public List<int[]> optimizeMemoryUsage(int[] foregroundTasks, int[] backgroundTasks, int K) {
		List<int[]> result = new ArrayList<>();
        if (K == 0 || (foregroundTasks.length == 0 && backgroundTasks.length == 0))
           result.add(new int[]{-1, -1});
        
        List<int[]> foregroundTaskList = new ArrayList<>();
        List<int[]> backgroundTaskList = new ArrayList<>();

        for (int i = 0; i < foregroundTasks.length; i++) {
            foregroundTaskList.add(new int[]{i, foregroundTasks[i]});
        }

        for (int i = 0; i < backgroundTasks.length; i++) {
            backgroundTaskList.add(new int[]{i, backgroundTasks[i]});
        }

        foregroundTaskList.sort((p1, p2) -> p1[1] - p2[1]);
        backgroundTaskList.sort((p1, p2) -> p1[1] - p2[1]);
        
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < foregroundTasks.length; i++){
            if (foregroundTaskList.get(i)[1] == K) {
                result.add(new int[]{foregroundTaskList.get(i)[0], -1});
                max = foregroundTaskList.get(i)[1];
            }
        }

        for(int i = backgroundTasks.length-1; i >= 0; i--){
            if (backgroundTaskList.get(i)[1] == K) {
                result.add(new int[]{-1, backgroundTaskList.get(i)[0]});
                max = backgroundTaskList.get(i)[1];
            }
        }
        
        if(foregroundTasks.length > 0 && backgroundTasks.length == 0){
            for (int i = 0; i < foregroundTasks.length; i++) {
                if (foregroundTaskList.get(i)[1] < K) {
                    result.add(new int[]{foregroundTaskList.get(i)[0], -1});
                }
            }

            return result;
        }

        if(backgroundTasks.length > 0 && foregroundTasks.length == 0){
            for (int i = backgroundTasks.length - 1; i >= 0; i--) {
                if (backgroundTaskList.get(i)[1] < K) {
                    result.add(new int[]{-1, backgroundTaskList.get(i)[0]});
                }
            }

            return result;
        }

        int i = 0;
        int j = backgroundTasks.length - 1;
        while (i < foregroundTasks.length && j >= 0) {
                int sum = foregroundTaskList.get(i)[1] + backgroundTaskList.get(j)[1];

                if (sum > K) {
                    j = j - 1;
                } else {
                    if (max <= sum) {
                        if (max < sum) {
                            max = sum;
                            result.clear();
                        }
                        result.add(new int[]{foregroundTaskList.get(i)[0], backgroundTaskList.get(j)[0]});
                        int index = j - 1;
                        while (index >= 0 &&
                                backgroundTaskList.get(index)[1] == backgroundTaskList.get(index + 1)[1]) {
                            result.add(new int[]{foregroundTaskList.get(i)[0], backgroundTaskList.get(index)[0]});
                            index--;
                        }
                    }
                    ++i;
                }
        }

        return result;
    }
}
======================================
import java.util.*;

public class HelloWorld{

     public static void main(String []args){
        //  int[] foreground = {1, 7, 2, 4, 5, 6};
        //  int[] background = {3, 1, 2};
        //  int target = 6;
        
        //  int[] foreground = {1, 7, 2, 4, 5, 6};
        //  int[] background = {1, 1, 2};
        //  int target = 10;
        
        int[] foreground = {1, 7, 2, 4, 5, 6};
         int[] background = {1, 1, 2};
         int target = 1;
         
          TreeMap<Integer, List<int[]>> tree = new TreeMap<>();
         
         List<int[]> result = new ArrayList<>();
         
         List<int[]> foreList = new ArrayList<>();
         for(int i = 0; i < foreground.length; i++) {
             int[] temp = new int[2];
             temp[0] = i;
             temp[1] = foreground[i];
             if(foreground[i] == target) {
                 int[] val = new int[2];
                 val[0] = i;
                 val[1] = -1;
                 result.add(val);

             }
             foreList.add(temp);
         }
         
         List<int[]> backList = new ArrayList<>();
         for(int i = 0; i < background.length; i++) {
             int[] temp = new int[2];
             temp[0] = i;
             temp[1] = background[i];
             if(background[i] == target) {
                     int[] val = new int[2];
                    val[0] = -1;
                    val[1] = i;
                 result.add(val);

             }
             backList.add(temp);
         }
         
         for (int i=0; i<foreList.size(); i++) {
            for (int j=backList.size()-1; j>=0; j--) {
                int sum = foreList.get(i)[1] + backList.get(j)[1]; 
                if (sum <= target) {
                    List<int[]> list = tree.computeIfAbsent(sum, (k) -> new ArrayList<>());
                    list.add(new int[]{foreList.get(i)[0], backList.get(j)[0]});
                }
            }
        }
        if(tree.size() > 0) {
            result.addAll(tree.floorEntry(target).getValue());
        }
            for(int[] res: result) {
                System.out.print("[ " + res[0] + "," + res[1] + "] ");
            }
      }
}
