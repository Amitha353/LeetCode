https://leetcode.com/discuss/interview-question/699973/
https://aonecode.com/amazon-online-assessment-turnstile

import java.util.*;
import java.io.*;
import java.lang.*;

public class Solution {
    public int[] getTimes(int numCustomers, int[] arrTime, int[] direction) {
        int[] times = new int[numCustomers];

    // build the 2 queues
    List<Queue<List<Integer>>> queues = new ArrayList<>();
    queues.add(new LinkedList<>());
    queues.add(new LinkedList<>());
    for(int i = 0; i < numCustomers; i++)
        queues.get(direction[i]).add(Arrays.asList(arrTime[i], i));

    // compare elements at the top to decide which queue is to process
    int currentTime = 0,
            priority = 1;
    while(!queues.get(0).isEmpty() || !queues.get(1).isEmpty()){
        Integer time0 = queues.get(0).isEmpty() ? Integer.MAX_VALUE : queues.get(0).peek().get(0),
                time1 = queues.get(1).isEmpty() ? Integer.MAX_VALUE : queues.get(1).peek().get(0);
        Integer faster = Math.min(time0, time1);

        // reset the priority
        if(faster - currentTime > 1)
            priority = 1;

        currentTime = Math.max(currentTime, faster);

        int comp = time0.compareTo(time1);
        int queueNumber = (comp == - 1 || comp == 0 && priority == 0) ? 0 : 1;

        do {
            List<Integer> current = queues.get(queueNumber).poll();
            times[current.get(1)] = currentTime;
            currentTime++;
        } while (!queues.get(queueNumber).isEmpty() && queues.get(queueNumber).peek().get(0) <= currentTime);

        priority = queueNumber;
    }
    return times;
    }
}
