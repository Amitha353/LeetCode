https://leetcode.com/problems/most-common-word/
https://algo.monster/problems/most_common_word

class Solution {
    public String mostCommonWord(String paragraph, String[] banned) {
        Set<String> ban = new HashSet<>(Arrays.asList(banned));
        Map<String, Integer> count = new HashMap<>();
        String[] words = paragraph.replaceAll("\\W+", " ").toLowerCase().split("\\s+");
        for(String word: words) {
            if(!ban.contains(word))
                count.put(word, count.getOrDefault(word, 0) + 1);
        }
        return Collections.max(count.entrySet(), Map.Entry.comparingByValue()).getKey();
    }
}

/* \w means word, and \W(note the upper case here) means non word. In this case, replace \W with " " means replacing all punctuation symbols with whitespace.

Collections.max(count.entrySet(), Map.Entry.comparingByValue()) It compares all entries in count (first param) with each other. How does it compare one entry to another? It does so by giving Map.Entry.comparingByValue() as second param to Collections.max() call. After max returns it has the entry with max value. .getKey() is the string with max value.


Time Complexity - O(P + B), P - size of paragraph and B is the size of banned.
Space Complexity - O(P + B), to store the count and the banned set.


Set<String> ban = new HashSet<>(Arrays.asList(banned));
        Map<String, Integer> count = new HashMap<>();
        String[] words = paragraph.replaceAll("\\W+" , " ").toLowerCase().split("\\s+");
        for (String w : words) if (!ban.contains(w)) count.put(w, count.getOrDefault(w, 0) + 1);
        return Collections.max(count.entrySet(), Map.Entry.comparingByValue()).getKey();
*/
