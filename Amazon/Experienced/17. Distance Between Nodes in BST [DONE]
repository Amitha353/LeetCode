https://algo.monster/problems/distance_between_nodes_in_bst
https://medium.com/algorithm-problems/distance-between-2-nodes-in-a-bst-8be78f71871e
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

import java.util.*;

public class HelloWorld{
    Node root;
     public static void main(String []args){
         Node root = new Node(0);
         int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};
         root = insertLevelOrder(arr, root, 0);
        //  inOrder(root);
        System.out.println("Dist(4, 5) = "+ findDistance(root, 4, 5));
        System.out.println("Dist(4, 6) = "+ findDistance(root, 4, 6));
        System.out.println("Dist(3, 4) = "+ findDistance(root, 3, 4));
        System.out.println("Dist(2, 4) = "+ findDistance(root, 2, 4));
        System.out.println("Dist(8, 5) = "+ findDistance(root, 8, 5));
        System.out.println();
        System.out.println(" ~~~~~~~~~~~~~ ");
        System.out.println();
        arr = new int[]{2, 1, 3};
         root = insertLevelOrder(arr, root, 0);
        //  inOrder(root);
        System.out.println("Dist(1, 2) = "+ findDistance(root, 1, 2));
        System.out.println("Dist(1, 3) = "+ findDistance(root, 1, 3));
     }
     
     public static Node insertLevelOrder(int[] arr, Node root, int i) {
         if(i < arr.length) {
             Node temp = new Node(arr[i]);
             root = temp;
             
             root.left = insertLevelOrder(arr, root.left, 2*i+1);
             root.right = insertLevelOrder(arr, root.right, 2*i+2);
         }
         return root;
     }
     
     public static void inOrder(Node root) {
         if(root != null) {
             inOrder(root.left);
             System.out.println(root.value + " ");
             inOrder(root.right);
         }
     }
     
     public static Node LCA(Node root, int n1, int n2) 
    {
        if (root == null)
            return root;
        if (root.value == n1 || root.value == n2)
            return root;
 
        Node left = LCA(root.left, n1, n2);
        Node right = LCA(root.right, n1, n2);
 
        if (left != null && right != null)
            return root;
          if (left == null && right == null)
              return null;
        if (left != null)
            return LCA(root.left, n1, n2);
        else
            return LCA(root.right, n1, n2);
    }
 
    // Returns level of key k if it is present in
    // tree, otherwise returns -1
    public static int findLevel(Node root, int a, int level)
    {
        if (root == null)
            return -1;
        if (root.value == a)
            return level;
        int left = findLevel(root.left, a, level + 1);
        if (left == -1)
            return findLevel(root.right, a, level + 1);
        return left;
    }
 
    public static int findDistance(Node root, int a, int b)
    {
        Node lca = LCA(root, a, b);
 
        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);
 
        return d1 + d2;
    }
}

class Node {
    int value;
    Node left, right;
    Node(int value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

import java.util.*;
class Solution {
    public static int bstDistance(int[] nums, int node1, int node2){
        // WRITE YOUR BRILLIANT CODE HERE
        Node root = new Node(0);
        root = insertLevelOrder(nums, root, 0);
        return findDistance(root, node1, node2);
    }
    
    public static Node insertLevelOrder(int[] arr, Node root, int i) {
         if(i < arr.length) {
             Node temp = new Node(arr[i]);
             root = temp;
             
             root.left = insertLevelOrder(arr, root.left, 2*i+1);
             root.right = insertLevelOrder(arr, root.right, 2*i+2);
         }
         return root;
     }
    
    public static int findDistance(Node root, int a, int b)
    {
        Node lca = LCA(root, a, b);
 
        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);
 
        return d1 + d2;
    }
    
    public static int findLevel(Node root, int a, int level)
    {
        if (root == null)
            return -1;
        if (root.value == a)
            return level;
        int left = findLevel(root.left, a, level + 1);
        if (left == -1)
            return findLevel(root.right, a, level + 1);
        return left;
    }
    
    public static Node LCA(Node root, int n1, int n2) 
    {
        if (root == null)
            return root;
        if (root.value == n1 || root.value == n2)
            return root;
 
        Node left = LCA(root.left, n1, n2);
        Node right = LCA(root.right, n1, n2);
 
        if (left != null && right != null)
            return root;
          if (left == null && right == null)
              return null;
        if (left != null)
            return LCA(root.left, n1, n2);
        else
            return LCA(root.right, n1, n2);
    }
    
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int[] nums = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int node1 = Integer.parseInt(scanner.nextLine());
        int node2 = Integer.parseInt(scanner.nextLine());
        scanner.close();
        System.out.println(bstDistance(nums, node1, node2));
    }
}

class Node {
    int value;
    Node left, right;
    Node(int value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}
=====================================================================================================================================
/*
- Givem the array -> create a binary tree - inserting based on level order.
- Find the Distance between the nodes in the tree
  - Identify the LCA for both the nodes 
  - Identify the levels for both nodes 
  - compute the distance : d1 + d2
*/
