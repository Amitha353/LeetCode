# https://leetcode.com/problems/number-of-provinces/
# https://www.youtube.com/watch?v=p3Iz0Ed3oD0


class Solution {
    class UF {
        int[] parent;
        public UF(int n) {
            parent = new int[n];
            for(int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if(rootX != rootY) {
                parent[rootX] = rootY;
            }
        }
        
        public int find(int x) {
            if(parent[x] == x) {
                return x;
            }
            return parent[x] = find(parent[x]);
        }
    }
    
    public int findCircleNum(int[][] M) {
        if(M == null || M.length == 0 || M[0].length == 0)
            return 0;
        
        int n = M.length;
        
        UF uf = new UF(n);
        
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                if(M[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        Set<Integer> result = new HashSet<>();
        for(int i = 0; i < n; i++) {
            result.add(uf.find(i));
        }
        return result.size();
    }
}

/* Union Find
*/
