https://leetcode.com/problems/number-of-islands/

class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0)
            return 0;
        int rows = grid.length;
        int cols = grid[0].length;
        int result = 0;
        
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(grid[i][j] == '1'){
                    result++;
                    dfs(i, j, grid);
                }
            }
        }
        return result;
    }
    
    public void dfs(int i, int j, char[][] grid) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0') return;
        
        grid[i][j] = '0';
        dfs(i-1, j, grid);
        dfs(i+1, j, grid);
        dfs(i, j-1, grid);
        dfs(i, j+1, grid);
    }
}

/*
Algorithm : DFS - Depth first search 
- Since the problem requires exploration of a confined grid space. The grid space can be treated as a strongly connected graph. It can be resolved by applying DFS on each component.
In each DFS() call an unvisited component is explored. The number of calls to the DFS will give the number of connected components in the graph.

- Alternate Approach - BFS - Breadth first search.

Time Complexity : O(row x col) # row ->  number of rows in grid, # col ->  number of columns in the grid.
Space complexity : O(row x col) # row ->  number of rows in grid, # col ->  number of columns in the grid.
- Optimum solution
*/
