//Q. Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
//https://leetcode.com/problems/min-stack/

class MinStack {
    int min = Integer.MAX_VALUE;
    Stack<Integer> stack = new Stack<>();
    
    /** initialize your data structure here. */
    public MinStack() {
    }
    
    public void push(int x) {
        //only push the old minimum value when the current minimum value changes after pushing the new value x
        if(x <= min) {
            stack.push(min);
            min = x;
        }
        stack.push(x);
    }
    
    public void pop() {
        // If pop operation could result in the changing of the current minimum value, pop twice and
        // change the current minimum value to the last minimum value.
        if(stack.pop() == min) min = stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

// Time Complexity - for all 4 operations - O(1)

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

