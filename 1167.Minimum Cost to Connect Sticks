/* You have some sticks with positive integer length. You can connect any two sticks of lengths X and Y into one stick by paying a cost of X+Y. You can perform this action until there is one stick remaining. Return the minimum cost of connecting all the given sticks into one stick in this way.
Input: sticks = [1, 8, 3, 5]
Output: 30 
Explaination:
1+3 = 4
4+5 = 9
8+9 = 17
Cost = 4 + 9 + 17 = 30
*/

/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;

public class Main
{
    public static int connectSticks(int[] sticks) {
        if(sticks == null || sticks.length < 2) {
            return 0;
        }
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int stick: sticks) {
            minHeap.offer(stick);
        }
        
        int res = 0;
        while(minHeap.size() > 1) {
            int merge = minHeap.poll() + minHeap.poll();
            res += merge;
            minHeap.offer(merge);
        }
        return res;
     }
     
	public static void main(String[] args) {
		System.out.println("Hello World");
		int[] sticks = {1, 8, 3, 5};
		int result = Main.connectSticks(sticks);
		System.out.println("result = " + result);
	}
}


/* Pseudocode:
- Find the routine that adds the two smallest first, then largest repeated the least times.
- Use min heap to get the two smallest values, merge them and add merged back to min heap until there is only one stick in min heap.

Time Complexity - O(n log n) = sticks.length
Space - O(n)
*/
