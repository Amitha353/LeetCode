/* Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1. */
/* https://leetcode.com/problems/first-unique-character-in-a-string/ */

class Solution {
    public int firstUniqChar(String s) {
        if(s.length() == 0 || s == null) return -1;
        
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            map.put(ch, map.getOrDefault(ch,0)+1);
        }
        
        for(int i = 0; i < s.length(); i++) {
            if(map.get(s.charAt(i)) == 1) return i;
        }
        return -1;
    }
}

/* HashMap
- Time Complexity : O(N) - since we go through the string of length N two times.
- Space Complexity : O(N) - since we habe to keep a hash map with N elements.
*/
