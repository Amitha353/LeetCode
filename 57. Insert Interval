class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();
        boolean added = false;
        
        for(int[] interval: intervals) {
            if(interval[1] < newInterval[0]) {
                result.add(interval);
            }
            else if(newInterval[1]  < interval[0]) {
                if(!added) {
                    result.add(newInterval);
                    added = true;
                }
                result.add(interval);
            } else {
                newInterval[0] = Math.min(interval[0], newInterval[0]);
                newInterval[1] = Math.max(interval[1], newInterval[1]);
            }
        }
        
        if(!added) {
            result.add(newInterval);
        }
        return result.toArray(new int[result.size()][]);
    }
}

/* The principle of this solution is to merge overlapping intervals inside the new one (if needed).
Then, the new interval is inserted inside the list only once at the right place.

Time Complexity - O(n)
*/
