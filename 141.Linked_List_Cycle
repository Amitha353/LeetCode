// Given a linked list, determine if it has a cycle in it.
// https://leetcode.com/problems/linked-list-cycle/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null) return false;
        
        ListNode slow = head;
        ListNode fast = head.next;
        while(slow != fast) {
            if(fast == null || fast.next == null) return false;
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }
}

/*Two pointers
Imagine two runner, one running at twice the speed of another. Both are bound to meet.
Time Complexity - O(n) - n is the total number of nodes in the linked list.
Space Complexity - O(1) - We use only two nodes.
*/
