/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;

public class Main
{
    static List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums) {
            map.put(n, map.getOrDefault(n, 0)+1);
            System.out.println(n + " " + map.get(n));
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = new PriorityQueue<>((a, b) -> 
        (b.getValue() - a.getValue()));
        for(Map.Entry<Integer, Integer> entry: map.entrySet()) {
            maxHeap.add(entry);
            System.out.println("Entry = " + entry);
        }
        
        List<Integer> res = new ArrayList<>();
        while(res.size() < k) {
            Map.Entry<Integer, Integer> entry = maxHeap.poll();
            res.add(entry.getKey());
            System.out.println("MaxHeap Entry = " + entry);
        }
        return res;
    }
    
	public static void main(String[] args) {
		int[] nums = {1, 1, 1, 2, 2, 3};
		int k = 2;
		List<Integer> result = Main.topKFrequent(nums, k);
		for(int r: result) {
		    System.out.print(r + " ");
		}
	}
}

/* Algorithm:
1. Create a hashmap to store the number and the frequency of occurence.
2. Create a maxheap priorityQueue to store elements that occurs the highest
(descending order).
3. Poll the elements into the List and return the elements.

Time Complexity -> O(N log k); N -> number of elements in the list;
Space Complexity -> O(N+k); k ->the size of the priority queue;

*/
