/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null) return root;
        if(key < root.val) root.left = deleteNode(root.left, key);
        else if(key > root.val) root.right = deleteNode(root.right, key);
        else {
            if(root.left == null) return root.right;
            else if(root.right == null) return root.left;
            root.val = findMin(root.right);
            root.right = deleteNode(root.right, root.val);
        }
        return root;
    }
    private int findMin(TreeNode node) {
        while(node.left != null) node = node.left;
        return node.val;
    }
}
    
/* Recursively traverse find the node that has the same value as the key, while setting the left and right nodes equal to the returned subtree. Once the node is found, have to handle the below 4 cases.
1. node doesn't have left or right - return null.
2. node only has left subtree - return left subtree.
3. node only has right subtree - return  the right subtree.
4. node has both left and right - find the minimum value in the right subtree, set the value to the currently found node, then recursively delete the minimum value in the right subtree.

- Whenever we delete a node with two child then we replace that node with the leftmost element from the right subtree because to hold the property of a BST (Binary Search Tree) all the elements to the right of the new node will be greater that it and all the left one wil be lesser than it.

- Time Complexity - O(h)
- Space Complexity - O(1) // re-check
*/
