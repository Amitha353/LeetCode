/* Design a max stack that supports push, pop, top, peekMax and popMax 
1. push(x) - Push element x onto stack.
2. pop() - remove the element on top of the stack and return it.
3. top() - get the element on the top of the stack.
4. peekMax() - retrieve the maximum element in the stack.
5. popMax() - retrieve the maximum element in the stack and remove it.
*/

/*Approach: Double Linked List + TreeMap
- Doubly linked list is stack - time to find and remove nodes in O(1).
- TreeMap can find the largest value, insert values and delete values all in O(log N) time.
*/

/* Dats Structures
1. Stack as a doubly Linked List - with head and tail pointers.
2. Map to store values to a List of Nodes.
*/

/*Algorithmic operations:
1. MaxStack.push(x) - we add node to dll and add or update our entry map.get(x).add(node).
2. MaxStack.pop() - we find the value val = dll.pop(), and remove the node from the map, deleting the entry if it was the last one.
3. MaxStack.popMax() - use the map to find the relevant node to unlink and return it's value.
*/

class MaxStack {
    TreeMap<Integer, List<Node>> map;
    DoubleLinkedList dll;

    public MaxStack() {
        map = new TreeMap();
        dll = new DoubleLinkedList();
    }

    public void push(int x) {
        Node node = dll.add(x);
        if(!map.containsKey(x))
            map.put(x, new ArrayList<Node>());
        map.get(x).add(node);
    }

    public int pop() {
        int val = dll.pop();
        List<Node> L = map.get(val);
        L.remove(L.size() - 1);
        if (L.isEmpty()) map.remove(val);
        return val;
    }

    public int top() {
        return dll.peek();
    }

    public int peekMax() {
        return map.lastKey();
    }

    public int popMax() {
        int max = peekMax();
        List<Node> L = map.get(max);
        Node node = L.remove(L.size() - 1);
        dll.unlink(node);
        if (L.isEmpty()) map.remove(max);
        return max;
    }
}

class DoubleLinkedList {
    Node head, tail;

    public DoubleLinkedList() {
        head = new Node(0);
        tail = new Node(0);
        head.next = tail;
        tail.prev = head;
    }

    public Node add(int val) {
        Node x = new Node(val);
        x.next = tail;
        x.prev = tail.prev;
        tail.prev = tail.prev.next = x;
        return x;
    }

    public int pop() {
        return unlink(tail.prev).val;
    }

    public int peek() {
        return tail.prev.val;
    }

    public Node unlink(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
        return node;
    }
}

class Node {
    int val;
    Node prev, next;
    public Node(int v) {val = v;}
}

/* Complexity Analysis
1. Time Complexity - O(log N) - for all operations except peek which is O(1), where N is the number of operations performed. Most operations involving TreeMap are O(log N).
2. Space Complexity - O(N), the size of the data structure used.
*/
