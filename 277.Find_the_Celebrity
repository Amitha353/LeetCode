/* Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them.
https://www.lintcode.com/problem/find-the-celebrity/description
*/

/* The knows API is defined in the parent class Relation.
      boolean knows(int a, int b); */

public class Solution extends Relation {
    /**
     * @param n a party with n people
     * @return the celebrity's label or -1
     */
    public int findCelebrity(int n) {
        // Write your code here
        int candidate = 0;
        for(int i = 1; i < n; i++) {
          if(knows(candidate, i) {
            candidate = i;
          }
        }
        for(int i = 0; i < n; i++) {
          if(i != candidate && knows(candidate, i) || !knows(i, candidate)) return -1;
        }
        
        return candidate;
    }
}

/* Algorithm | Pseudocode
1. Take the first element as a candidate.
2. loop through the rest of indices, if the chosen candidate knows somebody else, they cannot be a celebrity and hence replace value with new member.
3. Traverse the loops once again to ensure the shown candidate doesn't know anybosy and everybody knows the chosen candidate, else return -1
4. return the candidate.
*/
