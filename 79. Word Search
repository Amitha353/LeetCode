class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                if(board[i][j] == word.charAt(0) && dfs(board, i, j, 0, word))
                    return true;
            }
        }
         return false;
    }
        
        private boolean dfs(char[][] board, int i, int j, int count, String word) {
            if(count == word.length())
                return true;
            if(i < 0 || i>= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(count))
                return false;
            char temp = board[i][j];
            board[i][j] = ' ';
            boolean found = dfs(board, i+1, j, count+1, word) ||  //down
                            dfs(board, i-1, j, count+1, word) ||  //up
                            dfs(board, i, j+1, count+1, word) ||  //right
                            dfs(board, i, j-1, count+1, word);    //left
            board[i][j] = temp;
            return found;
        }
}

/* DFS with backtracking:
Time Complexity -> O(n)  n -> number of cells;
Space Complexity -> O(n)

---------------Tracing------------------
board, i, = 0, j = 0, count = 0, word = "ABCCED"
 - board[0][0] = A == word[0] = A
    i = 1, j = 0, count = 1  board[1][0] = S != B
    i = 0, j = 1, count = 1  board[0][1] = B == B
        i = 1, j = 1, count = 2 board[1][1] = F != C
        i = 0, j = 2, count = 3 board[0][2] = C == C
            i = 1, j = 2, count = 4 board[1][2] = C == C
                i = 2, j = 2, count = 5 board[2][2] = E == E
                    i = 3, j = 2, count = 6 board[3][2] - no
                    i = 1, j = 2, count = 6 board[1][2] = '' != D
                    i = 2, j = 3, count = 6 board[2][3] = 'E' != 'D'
                    i = 2, j = 1, count = 6 board[2][1] = 'D' == 'D'
                     found = true
*/
