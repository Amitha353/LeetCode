// Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int maxRectangle = 0;
        int[] heights = new int[cols];
        for(int row = 0; row < rows; row++) {
            for(int col = 0; col < cols; col++) {
                if(matrix[row][col] == '1')
                    heights[col]++;
                else
                    heights[col] = 0;
            }
            maxRectangle = Math.max(maxRectangle, lengthMaximumRectangle(heights));
        }
        return maxRectangle;
    }
    
    public int lengthMaximumRectangle(int[] heights) {
        if(heights == null || heights.length == 0) return 0;
        Stack<Integer> stack = new Stack<>();
        int index = 0;
        int maxArea = 0;
        while(index <= heights.length) {
            int height = (index == heights.length) ? 0 : heights[index];
            
            if(stack.isEmpty() || height >= heights[stack.peek()]) {
                stack.push(index);
                index++;
            } else {
                int currentHeight = heights[stack.pop()];
                int end = index - 1;
                int begin = stack.isEmpty() ? 0 : stack.peek()+1;
                maxArea = Math.max(maxArea, currentHeight * (end - begin + 1));
            }
        }
        return maxArea;
    }
}

// Pseudocode:
/* Check is the matrix is not empty
- traverse the matrix row-wise, with a 1-D array height
- every time 1 is encounter in a row, increment the value in the height matrix for the corresponding index, if a 0 is encountered than make it 0.
  ["1","0","1","0","0"],  -> Heights : [1, 0, 1, 0, 0]
  ["1","0","1","1","1"],  -> Heights : [2, 0, 2, 1, 1]
  ["1","1","1","1","1"],  -> Heights : [3, 1, 3, 2, 2] // from i = 2, i = 4, height = 2 => (2 * (4 - 2 +1)) =  2 * 3 = 6;
  ["1","0","0","1","0"]   -> Heights : [4, 0, 0, 3, 0]
- calculate the maximum 1's:
    - maintain a stack - push index corresponding two
        i) if the stack is empty
        ii) if the current height is greater than previous height - since we are building  a histogram
    - if the stack is not empty or the current element/ height is not greater than the previous element/height
      - rectangle area : length * width,
      - length - currentheight -> top of the stack element.
      - width : end - begin +1, end<- previous index (index - 1), begin <- last but 1 index on the stack()
*/

/*
Time Complexity : O(rows x cols)
Space Complexity : O(cols) # heights -> 1D arrays -> colswise
*/
