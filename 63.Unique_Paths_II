class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int R = obstacleGrid.length;
        int C = obstacleGrid[0].length;
        
        if(obstacleGrid[0][0] == 1) {
            return 0;
        }
        
        obstacleGrid[0][0] = 1;
        
        for(int i = 1; i < R; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i-1][0] != 0) ? 1 : 0;
        }
    
        for(int j = 1; j < C; j++) {
            obstacleGrid[0][j] = (obstacleGrid[0][j] == 0 && obstacleGrid[0][j-1] != 0) ? 1 : 0;
        }
        
        for(int i = 1; i < R; i++) {
            for(int j = 1; j < C; j++) {
                if(obstacleGrid[i][j]  == 1) {
                    obstacleGrid[i][j] = 0;
                } else {
                    obstacleGrid[i][j] = obstacleGrid[i][j-1] + obstacleGrid[i-1][j];
                }
            }
        }
        return obstacleGrid[R-1][C-1];
    }
}
/* Given a starting position - we need to find the number of unique paths to reach the finish point, in the presence of obstacles.
Dynamic Programming - since each position can be reached from a previous cell
In the presence of obstacles, that particular cell will not contribute to the path -> hence mark it 0.
In the absence of obstacles mark it as one.
- First row, and first column an contribute 1 if possible.
- There after, if the cell does not have an obstacle, then replace it with the sum of the top and left cell else mark it 0.

Complexity Analysis:
Time Complexity -O(M X N) -> the rectangular grid given to us is of size M X N, and we process cell just once.
Space Complexity - O(1) - Utilize the obstacleGrid as the DP array. Hence no extra space.
*/
