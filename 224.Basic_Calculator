//Implement a basic calculator to evaluate a simple expression string.

/*The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .*/

class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<Integer>();
        int result = 0;
        int sign = 1;
        stack.push(1);
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if(ch == ' ') continue; // If it is an empty space continue
            else if(ch == '+') sign = 1; // if positive : multiply result with 1
            else if(ch == '-') sign = -1; // if negative : multiply result with -1
            else if(ch == '(') {
                stack.push(stack.peek() * sign); // if ( : multiply stack top element with sign and push it onto stack
                sign = 1;
            } else if(ch == ')') stack.pop(); // if ')' - pop the stack top element.
            else { // when you encounter digits, if there a consecutive sequence of numbers then traverse the string shift the value to higher decimal placae by multiplying with 10.
                int temp = ch - '0'; 
                while(i+1 < s.length() && Character.isDigit(s.charAt(i+1))) {
                    temp = temp * 10 + s.charAt(++i)-'0';
                }
                result += temp * sign * stack.peek();
                sign = 1;
            }
        }
        return result;
    }
}

Time Complexity: O(N) - N is the length of the string. Every character will be processed once.
Space Complexity: O(N) - N is the length of the string.
