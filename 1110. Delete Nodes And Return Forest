/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Set<Integer> to_delete_set;
    List<TreeNode> res;
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        to_delete_set = new HashSet<>();
        res = new ArrayList<>();
        for (int i : to_delete)
            to_delete_set.add(i);
        helper(root, true, "main");
        return res;
    }

    private TreeNode helper(TreeNode node, boolean is_root, String loc) {
        if (node == null) return null;
        boolean deleted = to_delete_set.contains(node.val);
        if (is_root && !deleted) 
        {
            System.out.println(node.val + " added to the result set");
            res.add(node);
        }
        System.out.println(loc + " " + node.val + " " + is_root + " " + deleted);
        node.left = helper(node.left, deleted, "left");
        node.right =  helper(node.right, deleted, "right");
        return deleted ? null : node;
    }
}

/*Pseudocode:
- If a node is a root and is not deleted then it will be added to the result.
1. Create a HashSet to hold the nodes to be deleted.
2. Create a TreeNode List to hold the result.
3. Create a method helper -> root array and boolean variable to indicate root.
    3.1. if node is null return null.
    3.2. if the node is in the to_delete set than mark deleted boolean variable to false.
    3.3. if the current node isroot and and deleted is false -> then add to the result.
    3.4. traverse the left child if it exists -> isroot is false.
    3.5. traverse the right child if it exists -> isroot is false.
    3.6. if deleted is true - return false else return true.
    
- isroot - identigy root elements - evem though created during disjunction.
- deleted - track the nodes is the to_delete_set.

- Time Complexity : O(N)
- Space Complexity : O(N + H) - H is the height of the tree.
*/
