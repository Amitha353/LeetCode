/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        if(root == null) return result;
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<String> str = new LinkedList<>();
        queue.offer(root);
        str.offer("");
        while(!queue.isEmpty()) {
            TreeNode curr = queue.poll();
            String currStr = str.poll();
            
            if(curr.left == null && curr.right == null) result.add(currStr+curr.val);
            if(curr.left != null) {
                queue.offer(curr.left);
                str.offer(currStr + curr.val + "->");
            }
            if(curr.right != null) {
                queue.offer(curr.right);
                str.offer(currStr + curr.val + "->");
            }
        }
        return result;
    }
}
/* BFS
- Time : O(n)
- Space :O(n)
*/
