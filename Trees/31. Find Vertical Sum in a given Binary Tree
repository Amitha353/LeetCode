import java.util.*;


class Node {
    int data;
    Node left = null, right = null;
    Node(int data) {
        this.data = data;
    }
}

public class HelloWorld{

     public static void main(String []args){
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        verticalSum(root);
     }
     
     public static void verticalSum(Node root) {
         TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
         dfs(root, 0, 0, map);
        //  List<List<Integer>> result = new ArrayList<>();
        List<Integer> result = new ArrayList<>();
         for(TreeMap<Integer, PriorityQueue<Integer>> item: map.values()) {
             int temp = 0;
             for(PriorityQueue<Integer> pq: item.values()) {
                 while(!pq.isEmpty()) {
                     temp += pq.poll();
                 }
             }
             result.add(temp);
         }
         
         for(int list: result) {
             System.out.print(list + " ");
         }
     }
     
     public static void dfs(Node root, int x, int y,  TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map) {
         if(root == null) return;
         
         if(!map.containsKey(x)) {
             map.put(x, new TreeMap<>());
         }
         
         if(!map.get(x).containsKey(y)) {
             map.get(x).put(y, new PriorityQueue<>());
         }
         
         map.get(x).get(y).offer(root.data);
         dfs(root.left, x-1, y+1, map);
         dfs(root.right, x+1, y+1, map);
     }
}

/*
DFS
- Time: O(n)
- Space: O(n)
*/
