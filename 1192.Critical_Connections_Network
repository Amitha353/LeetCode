// Return all critical connections in the network in any order.
// https://leetcode.com/problems/critical-connections-in-a-network/

class Solution {
    private int time = 0; //current time of discovery
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        //create an graph that stores the adjacent nodes for each node - graph
        // a critical node is identified based on its discover, if it is discovered after the root discovery, then it is critical - this must be added to the output.

        List<Integer>[] graph = new ArrayList[n];
        for(int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        
        //Adjacent nodes of nodes are stored - Adjacency matrix
        for(List<Integer> conn: connections) {
            graph[conn.get(0)].add(conn.get(1));
            graph[conn.get(1)].add(conn.get(0));
        }
        
        int[] disc = new int[n]; // discovery time of each node
        int[] low = new int[n]; // earliest discovered noe reachable from this node in DFS
        boolean[] visited = new boolean[n]; // whether this node has been visited in DFS
        List<List<Integer>> result = new ArrayList<>();
        
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                dfs(i, -1, disc, low, visited, graph, result); // pick a node and perform DFS
            }
        }
        return result; // return critical connection, disc[root] < low[neighbor]
    }
    
    // root is the current node under consideration
    // parent - parent of the curretn node.
    private void dfs(int root, int parent, int[] disc, int[] low, boolean[] visited, List<Integer>[] graph, List<List<Integer>> result) {
        visited[root] = true;
        disc[root] = time++;
        low[root] = disc[root];
        for(Integer neig: graph[root]) {
            if(neig == parent) continue;
            if(!visited[neig]) {
                dfs(neig, root, disc, low, visited, graph, result);
                low[root] = Math.min(low[root], low[neig]);
                if(disc[root] < low[neig]) {
                    result.add(Arrays.asList(root, neig));
                }
            } else {
                low[root] = Math.min(low[root], disc[neig]);
            }
        }
    }
}

/* Complexity 
E = total number of edges = connections.size()
V = total number of vertices = n
Time Complexity - O(V+E) , the first for loop loops over each vertice - cost O(V),
- Second for loop loops over each edge, which costs O(E). DFS vists each vertice and edge once - cost - O(V + E)

Space Complexity - O(V + E) - variable graph is an adjacency list representation of the graph, which costs O(V + E) space. The stack usage in worst case.
*/
