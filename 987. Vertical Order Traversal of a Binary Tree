/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
       TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        dfs(root, 0, 0, map);
        List<List<Integer>> list = new ArrayList<>();
        for (TreeMap<Integer, PriorityQueue<Integer>> ys : map.values()) {
            list.add(new ArrayList<>());
            for (PriorityQueue<Integer> nodes : ys.values()) {
                while (!nodes.isEmpty()) {
                    list.get(list.size() - 1).add(nodes.poll());
                }
            }
        }
        return list;
    }
    private void dfs(TreeNode root, int x, int y, TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map) {
        if (root == null) {
            return;
        }
        if (!map.containsKey(x)) {
            map.put(x, new TreeMap<>());
        }
        if (!map.get(x).containsKey(y)) {
            map.get(x).put(y, new PriorityQueue<>());
        }
        map.get(x).get(y).offer(root.val);
        System.out.println("root.val = " + root.val + " x = " + x + " y = " + y);
        dfs(root.left, x - 1, y + 1, map);
        dfs(root.right, x + 1, y + 1, map);
    }
}


/* Pseudocode: 
-> Create a TreeMap (Integer -> denotes - vertical index) , (TreeMap -> (Integer -> denotes the level, Priority Queue ->  adds node val at that level)) [add nodes into prority based on level within the same verticle index].
-> Perform Depth-First search(root, verticle index, level index, TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>)
    * root is null return
    * if map does not contain verticle index -> add verticle index to TreeMap.
    * if map does not contain the level index for the given verticle index -> add the level index to the map.
    * for the given - verticle index and level index - insert/offer the root value.
    * for left child -> decrement the verticle index, increment the level index.
    * for right child -> increment the verticle index, increment the level index.
    
-> Tracing: [3, 9, 20, null, null, 15, 7]
dfs(3, 0, 0, map)  -> map(0, 0, 3)
   LHS: dfs(9, -1, 1, map) -> map(-1, 1, 9)
        LHS: dfs(null, -2, 2, map) <- null
   RHS: dfs(20, 1, 1, map) -> map(1, 1, 20)
        LHS: dfs(15, 0, 2, map) -> map(0, 2, 15)
             LHS:  dfs(null, -1, 3, map) <- null
        RHS: dfs(7, 2, 2, map) -> map(2, 2, 7)
-----------------
TreeMap:
(0, 0, 3)
(-1, 1, 9)
(1, 1, 20)
(0, 2, 15)
(2, 2, 7)
------------
TreeMap Follows intrinsic order and with each verticle index a priority queue is maintained to track level
(-1, 1, 9)
(0, 0, 3)
(0, 2, 15)
(1, 1, 20)
(2, 2, 7)
--------------
[[9], [3, 15], [20], [7]]
 */
