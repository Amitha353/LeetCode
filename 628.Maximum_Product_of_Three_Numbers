class Solution {
    public int maximumProduct(int[] nums) {
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;
        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        
        for(int n: nums) {
            if(n <= min1) {
                min2 = min1;
                min1 = n;
            } else if(n <= min2) {
                min2 = n;
            }
            if(n >= max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if(n >= max2) {
                max3 = max2;
                max2 = n;
            } else if(n >= max3) {
                max3 = n;
            }
        }
        return Math.max(min1 * min2 * max1, max1 * max2 * max3);
    }
}

/*Single Scan
- Find the required 2 smallest values - min1, min2 and three largest values - max1, max2, and max3.
- Find the largest value out of: min1 x min2 x max1 and max1 x max2 x max3.
- Time Complexity: O(n) - Only one iteration over the nums array of length n is required.
- Space Complexity: O(1)
*/
