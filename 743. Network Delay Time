class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge: times) {
            if (!graph.containsKey(edge[0]))
                graph.put(edge[0], new ArrayList<int[]>());
            graph.get(edge[0]).add(new int[]{edge[1], edge[2]});
        }
        
        PriorityQueue<int[]> heap = new PriorityQueue<int[]>((info1, info2) -> info1[0] - info2[0]);
        heap.offer(new int[]{0, K});
        
        Map<Integer, Integer> dist = new HashMap<>();
        
        while(!heap.isEmpty()) {
            int[] info = heap.poll();
            int d = info[0], node = info[1];
            if(dist.containsKey(node)) continue;
            dist.put(node, d);
            if(graph.containsKey(node)) {
                for(int[] edge: graph.get(node)) {
                    int nei = edge[0], d2 = edge[1];
                    if(!dist.containsKey(nei))
                        heap.offer(new int[]{d+d2, nei});
                }
            }
        }
        if(dist.size() != N) return -1;
        int ans = 0;
        for(int cand: dist.values())
            ans = Math.max(ans, cand);
        return ans;
    }
}

/* Pseudocode: Dijkstra's Algorithm

- Create a HashMap and for each edge add the respective neighbour and distance.
- Introduce a PriorityQueue to add elements based on min_distance, intialize it with the k node.
- Create a distance map to track the distance to node from central k node as we traverse the graph
- load the element from the heap.
- if the node is not in the distance map, load it to the distance map(node, distance)
- traverse through the esdges and neighbours of the node.
    - if the neighbor is not in the distance map, then add it to the heap -> (distance from central node to that node, neighbour)
    
- if the size of distance is same as the number of nodes, then return the max value.

* Time Complexity - O(E log E) - as every edge gets added to the heap.
* Space Complexity - O(N+E) - O(E) - size of the graph and O(N) - size of other objects.
*/
