Design a link shortening URL system
1. Simple Solution - Hashing. 
 - Use a hash function to convert long string to a short string.
 - In Hashinh, there may be collisions (2 long URLs map to teh same short URL) and we need 
 a unique short URL for every long URL so that we can access long URL back.

2. Better Solution 
 - Use the integer id stored in the database and convert the integer to a character string 
    that is at most 6 characters long.
 - This is a base conversion problem.
 
* Important observation about possible characters in URL:
-> A URL character can be one of the following:
1) A lower case alphabet ['a' to 'z'] - 26 characters.
2) An upper case alphabet ['A' to 'Z'] - 26 characters.
3) Digits ['0' to '9'] - 10 characters
There aretotal 26 + 26 + 10 = 62 possible characters.
** So the task is to convert a decimal number to base 62 number.
-> To get the original long URL, we need to get URL id in the database.
-> The id can be obtained using base 62 to decimal conversion.

public class HelloWorld{

     public static void main(String []args){
        int n = 12345;
        String shorturl = idToShortURL(n);
        System.out.println("Generated short url is " + shorturl);  
        System.out.println("Id from url is " +  
                            shortURLtoID(shorturl)); 
     }
     
     static String idToShortURL(int n) {
         char[] map = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".toCharArray();
         
         StringBuilder sb = new StringBuilder();
         
         while(n > 0) {
             sb.append(map[n%62]);
             n = n/62;
         }
         
         return sb.reverse().toString();
     }
     
     static int shortURLtoID(String shortURL) {
         int id = 0;
         for(int i = 0; i < shortURL.length(); i++) {
             if('a' <= shortURL.charAt(i) && shortURL.charAt(i) <= 'z') {
                 id = id*62+shortURL.charAt(i)-'a';
             }
             if('A' <= shortURL.charAt(i) && shortURL.charAt(i) <= 'Z') {
                 id = id*62+shortURL.charAt(i)-'A'+26;
             }
             if('0' <= shortURL.charAt(i) && shortURL.charAt(i) <= '9') {
                 id = id*62+shortURL.charAt(i)-'0'+52;
             }
         }
         return id;
     }
}

Optimization: We can avoid reverse step in idToShortURL(). 
To make sure that we get the same ID back, we also need to change shortURLtoID() 
to process characters from the end instead of the beginning.

