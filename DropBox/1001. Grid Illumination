class Solution {
    int[][] dirs = {{0,1}, {0,-1}, {1,0}, {-1,0}, {1,1}, {1,-1}, {-1,1}, {-1,-1}, {0,0}};
    
    public int[] gridIllumination(int N, int[][] lamps, int[][] queries) {
        Map<Integer, Integer> m1 = new HashMap();      // row number to count of lamps
        Map<Integer, Integer> m2 = new HashMap();       // col number to count of lamps
        Map<Integer, Integer> m3 = new HashMap();       // diagonal x-y to count of lamps
        Map<Integer, Integer> m4 = new HashMap();       // diagonal x+y to count of lamps
        Map<Integer, Boolean> m5 = new HashMap();       // whether lamp is  ON|OFF
        
        // increment counters while adding lamps
        for(int i=0; i<lamps.length; i++){
            int x = lamps[i][0];
            int y = lamps[i][1];
            m1.put(x, m1.getOrDefault(x, 0) + 1);
            // System.out.println("1. " + x + " -- " + m1.get(x));
            m2.put(y, m2.getOrDefault(y, 0) + 1);
            // System.out.println("2. " + y + " -- " + m2.get(y));
            m3.put(x-y, m3.getOrDefault(x-y, 0) + 1);
            // System.out.println("3. " + (x-y) + " -- " + m3.get(x-y));
            m4.put(x+y, m4.getOrDefault(x+y, 0) + 1);
            // System.out.println("4. " + (x+y) + " -- " + m4.get(x+y));
            m5.put(N*x + y, true);
            // System.out.println("5. " + (N*x+y) + " -- " + true);
            // System.out.println("===================");
        }

        int[] ans = new int[queries.length];
        // address queries
        for(int i=0; i<queries.length; i++){
            int x = queries[i][0];
            int y = queries[i][1];
            // System.out.println("query : x = " + x + " y = " + y);
            // System.out.println("| " + m1.getOrDefault(x, 0) + " | " + m1.getOrDefault(y, 0) + " | " + m1.getOrDefault((x-y), 0) + " | " + m1.getOrDefault((x+y), 0) + " | ");
            ans[i] = (m1.getOrDefault(x, 0) > 0 || m2.getOrDefault(y, 0) > 0 || m3.getOrDefault(x-y, 0) > 0 || m4.getOrDefault(x+y, 0) > 0) ? 1 : 0;            
            // switch off the lamps, if any
            // System.out.println("valid : "+ ans[i]);
            int count = 0;
            for(int d=0; d<dirs.length; d++){
                int x1 = x + dirs[d][0];
                int y1 = y + dirs[d][1];
                // System.out.println(x + " : " + y + " : " + dirs[d][0] + " : " + dirs[d][1] + " : " + " dirx = " + x1 + " diry = " + y1 + " - " + count++);
				if(m5.containsKey(N*x1 + y1) && m5.get(N*x1 + y1)){
                    // the lamp is on, turn it off, so decrement the count of the lamps
                    m1.put(x1, m1.getOrDefault(x1, 1) - 1);
                    // System.out.println("dec x1 "+ x1 + " -- " + m1.get(x1));
                    m2.put(y1, m2.getOrDefault(y1, 1) - 1);
                    // System.out.println("dec y1 " + y1 + " -- " + m2.get(y1));
                    m3.put(x1 - y1, m3.getOrDefault(x1 - y1, 1) - 1);
                    // System.out.println("dec (x1-y1) " + (x1-y1) + " -- " + m3.get(x1-y1));
                    m4.put(x1 + y1, m4.getOrDefault(x1 + y1, 1) - 1);
                    // System.out.println("dec (x1+y1) " + (x1+y1) + " -- " + m4.get(x1+y1));
                    m5.put(N*x1+y1, false);
                    // System.out.println("dec (N*x1+y1) " + (N*x1+y1) + " -- " + false);
                    // System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                }
                // System.out.println("Out dir loop");
                // System.out.println("++++++++++++++++++++++++++++++++++++");
            }
        }
        
        return ans;
    }
}

/*
1. The row, column or diagonal will remain illuminated if there are > 0 lamps 
on a particular row, column or diagonal.
2. All diagonals with slope = 1, can be represented by x=y+c, i.e theyhave x-y = constant.
3. All diagonals with slope = -1, can be represented by x=-y+c, i.e they have x+y = constant.
4. Store the counts -> x, y, x-y, x+y and the lamp presence in separate maps.
5. When a lamp is turned off, the count of lamps in the respective row, column, or diagona; decreases by 1.

Time Complexity : O(L+Q), where L -> number of lamps and Q -> number of queries.
Space Complexity : O(L)
*/
