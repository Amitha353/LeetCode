public class Solution {
    /**
     * @param pattern: a string,denote pattern string
     * @param str: a string, denote matching string
     * @return: a boolean
     */
    public boolean wordPatternMatch(String pattern, String str) {
        // write your code here
        if(pattern.length() == 0 && str.length() == 0) {
            return true;
        }
        
        if(pattern.length() == 0) {
            return false;
        }
        
        HashMap<Character, String> map = new HashMap<>();
        HashSet<String> set = new HashSet<>();
        return helper(pattern, str, 0, 0, map, set);
    }
    
    public boolean helper(String pattern, String str, int i, int j, HashMap<Character, String> map, HashSet<String> set) {
        if(i == pattern.length() && j == str.length()) {
            return true;
        }
        if(i >= pattern.length() || j >= str.length()) {
            return false;
        }
        
        char ch = pattern.charAt(i);
        for(int k = j+1; k <= str.length(); k++) {
            String sub = str.substring(j, k);
            if(!map.containsKey(ch) && !set.contains(sub)) {
                map.put(ch, sub);
                set.add(sub);
                if(helper(pattern, str, i+1, k, map, set)) {
                    return true;
                }
                map.remove(ch);
                set.remove(sub);
            } else if(map.containsKey(ch) && map.get(ch).equals(sub)) {
                if(helper(pattern, str, i+1, k, map, set)) {
                    return true;
                }
            }
        }
        return false;
    }
}
