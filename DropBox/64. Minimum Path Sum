class Solution {
    public int minPathSum(int[][] grid) {
        for(int i = 1; i < grid.length; i++) {
            grid[i][0] += grid[i-1][0];
        }
        for(int j = 1; j < grid[0].length; j++) {
            grid[0][j] += grid[0][j-1];
        }
        
        for(int i= 1; i < grid.length; i++) {
            for(int j = 1; j < grid[0].length; j++) {
                grid[i][j] += Math.min(grid[i-1][j] , grid[i][j-1]);
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}

/*
1. Sum the first column cell by cell.
2. Sum the first row cell by cell.
Since there is no way to reach to that point other than go down or right.
3. The rest of the grid[i][j] (for all i > 1 and j > 1) find the minimum of the left(j-1) and top(i-1) value and add to the current grid.
4. The minimum path sum will be the bottom value.

1 3 1
1 5 1
4 2 1

-> Step 1 : sum the first column [down]
1 3 1
2 5 1
6 2 1

-> Step 2 : sum the first row [right]
1 4 5
2 5 1
6 2 1

-> Step 3: For everying in between, sum with min(left, top)
1 4 5
2 7 6
6 9 7  // bottom right value -> 7

Time Complexity - O(n*m)
Space Complexity - O(1)
*/
