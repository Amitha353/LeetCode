class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if(digits == null || digits.length() == 0) return result;
        
        HashMap<Integer, String> map = new HashMap<>();
        map.put(2, "abc");
        map.put(3, "def");
        map.put(4, "ghi");
        map.put(5, "jkl");
        map.put(6, "mno");
        map.put(7, "pqrs");
        map.put(8, "tuv");
        map.put(9, "wxyz");
        
        char[] inputs = digits.toCharArray();
        result.add("");
        
        for(char c: inputs) {
            result = expand(result, map.get(c-'0'));
        }
        return result;
    }
    
    public List<String> expand(List<String> data, String info) {
        List<String> output = new ArrayList<>();
        
        for(String l: data) {
            for(char c: info.toCharArray()) {
                output.add(l+c);
            }
        }
        return output;
    }
}

/*
Complexity Analysis

Time complexity : O(3^N x 4^M), where N is the number of digits in the input that maps to 3 letters (e.g. 2, 3, 4, 5, 6, 8) and M is the number of digits in the input that maps to 4 letters (e.g. 7, 9), and N+M is the total number digits in the input.

Space complexity : O(3^N x 4^M) since one has to keep 3^N x 4^M solutions.
*/
