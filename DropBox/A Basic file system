Write a basic file system and implement the commands ls, pwd, mkdir, create, rm, cd, cat, mv.

import java.util.*;

public class FileSystem {
    
    class File {
        boolean isFile = false;
        Map<String, File> children = new HashMap<>();
        String content = "";
        public File() {}
    }
    
    File root = null;
    
    public FileSystem() {
        root = new File();
    }
    
    public void mkdir(String path) {
        String[] dirs = path.split("/");
        File node = root;
        for(String dir: dirs) {
            if(dir.length() == 0) continue;
            if(!node.children.containsKey(dir)) {
                node.children.put(dir, new File());
            }
            node = node.children.get(dir);
        }
        node.content += content;
        node.isFile = true;
    }
    
    public String readContentFromFle(String filePath) {
        String[] dirs = filePath.split("/");
        File node = root;
        for(String dir: dirs) {
            if(dir.length() == 0) continue;
            if(!node.children.containsKey(dir)) {
                node.children.put(dir, new File());
            }
            node = node.children.get(dir);
        }
        return node.content;
    }
    
    public List<String> ls(String path) {
        List<String> res = new ArrayList<>();
        
        String[] dirs = path.split("/");
        File node = root;
        String lastItem = "";
        for(String dir: dirs) {
            if(dir.length() == 0) continue;
            if(!node.children.containsKey(dir)) {
                node.children.put(dir, new File());
            }
            lastItem = dir;
            node = node.children.get(dir);
        }
        if(node.isFile) res.add(lastItem);
        else {
            for(String key: node.children.keySet()) {
                res.add(key);
            }
        }
        Collections.sort(res);
        return res;
    }

    //  public static void main(String []args){
        
    //  }
}
