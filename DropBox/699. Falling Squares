class Solution {
    
    public List<Integer> fallingSquares(int[][] positions) {
        List<Integer> res=new ArrayList<>();
        TreeMap<Integer,Integer> tm=new TreeMap<>();
        tm.put(0,0);
        int max=0;
        for(int[] square:positions) {
            int start=square[0], end=square[0]+square[1];
            int left=tm.floorKey(start);
            Map<Integer,Integer> map=tm.subMap(left, end);
            int height=0;
            for(int h:map.values()) {
                height=Math.max(h,height); 
            }
            height+=square[1];
            max=Math.max(max,height);   
            res.add(max);
            int curHeight=tm.floorEntry(end).getValue();
            tm.put(start,height);
            tm.put(end, curHeight);
            tm.subMap(start,false,end,false).clear();
        }          
        return res;
    }
}

/*
Time Complexity- O(n log(n))
Space Complexity - O(n)

Similar to skyline concept, going from left to right the path is decomposed to consecutive segments, and each segment has a height. Each time we drop a new square, then update the level map by erasing & creating some new segments with possibly new height. There are at most 2n segments that are created / removed throughout the process, and the time complexity for each add/remove operation is O(log(n)).
*/
