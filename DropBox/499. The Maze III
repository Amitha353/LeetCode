public class Solution {
    
    class Point implements Comparable<Point> {
        int x;
        int y;
        int dis;
        String path;  // path from ball

        Point(int x, int y, int dis, String path) {
            this.x = x;
            this.y = y;
            this.dis = dis;
            this.path = path;
        }
        public int compareTo(Point other) {
            if (this.dis == other.dis) {
                return this.path.compareTo(other.path);     
            }
            return this.dis - other.dis;
        }
    }
    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
        boolean[][] visited = new boolean[maze.length][maze[0].length];

        PriorityQueue<Point> pq = new PriorityQueue<>();

        pq.offer(new Point(ball[0], ball[1], 0, ""));

        // arrays used for exploring 4 path from a point
        char[] dstr = {'d', 'l', 'r', 'u'};
        int[][] dirs = {{1,0},{0,-1},{0,1},{-1,0}};

        while (!pq.isEmpty()) {
            Point pt = pq.poll();
            if (pt.x == hole[0] && pt.y == hole[1]) {
                return pt.path;
            }
            visited[pt.x][pt.y] = true;

            for (int i = 0; i < dirs.length; i++) {
                int x = pt.x;
                int y = pt.y;
                int dis = pt.dis;
                String path = pt.path;

                // Explore current direction until hitting a wall or the hole
                while (x + dirs[i][0] >= 0 && x + dirs[i][0] < maze.length && y + dirs[i][1] >= 0 &&
                       y + dirs[i][1] < maze[0].length && maze[x + dirs[i][0]][y + dirs[i][1]] == 0) {

                    x += dirs[i][0];
                    y += dirs[i][1];
                    dis += 1;

                    if (x == hole[0] && y == hole[1]) {
                        break;
                    }
                }
                
                if (!visited[x][y]) {
                    pq.offer(new Point(x, y, dis, path + dstr[i]));
                }
            }
        }
        return "impossible";
    }
}

/*
BFS
Time complexity of O (m * n * Max (m, n)) 
Spatial complexity is O (mn)
*/
