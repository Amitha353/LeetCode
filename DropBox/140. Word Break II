class Solution {    
    Map<String, List<String>> map = new HashMap<>();
    
    public List<String> wordBreak(String s, List<String> wordDict) {
        if(map.containsKey(s)){
            return map.get(s);
        }
        
        List<String> result = new ArrayList<>();
        if(s.length() == 0) {
            result.add("");
            return result;
        }
        
        for(String word: wordDict) {
            if(s.startsWith(word)) {
                List<String> subList = wordBreak(s.substring(word.length()), wordDict);
                for(String sub: subList) {
                    System.out.println(word + " -- " + sub);
                    result.add(word + (sub.isEmpty() ? "" : " ") + sub);
                }
            }
        }
        map.put(s, result);
        return result;
    }
}

/*
- Time complexity is O(n*2^n), n being the number of characters in the input.
- Space complexity is O(n*2^n)
- https://medium.com/@salonikaurone/leetcode-word-break-ii-explained-d41ecfbe8fc5
*/
