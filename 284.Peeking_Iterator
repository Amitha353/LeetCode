// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html

class PeekingIterator implements Iterator<Integer> {
    private Integer next;
    private Iterator<Integer> iterator;
    // private boolean done = false;
    
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
        if(iterator.hasNext()) {
            next = iterator.next();
        // } else {
        //     done = true;
        }
        this.iterator = iterator;
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
        return next;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
        int temp = next;
	    if(iterator.hasNext()) {
            next = iterator.next();
        } else {
            // done = true;
            next = null;
        }
        return temp;
	}
	
	@Override
	public boolean hasNext() {
	    // return !done;
        return next != null;
	}
}

//** Need to re-check
