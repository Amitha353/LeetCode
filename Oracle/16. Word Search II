class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> result = new ArrayList<>();
        TrieNode root = buildTrie(words);
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                dfs(board, i, j, root, result);
            }
        }
        return result;
    }
    
    class TrieNode {
        TrieNode[]  next = new TrieNode[26];
        String word;
    }
    
    public TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for(String word: words) {
            TrieNode p = root;
            for(char c: word.toCharArray()) {
                if(p.next[c-'a'] == null) {
                    p.next[c-'a'] = new TrieNode();
                }
                p = p.next[c-'a'];
            }
            p.word = word;
        }
        return root;
    }
    
    public void dfs(char[][] board, int i, int j, TrieNode root, List<String> result) {
        char c = board[i][j];
        
        if(c == '#' || root.next[c-'a'] == null) return;
        root = root.next[c-'a'];
        if(root.word != null) {
            result.add(root.word);
            root.word = null;
        }
        
        board[i][j] = '#';
        if(i > 0) dfs(board, i-1, j, root, result);
        if(j > 0) dfs(board, i, j-1, root, result);
        if(i < board.length-1) dfs(board, i+1, j, root, result);
        if(j < board[0].length-1) dfs(board, i, j+1, root, result);
        board[i][j] = c;
    }
}
