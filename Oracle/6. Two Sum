class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> mapper = new HashMap<>();
        for(int i =0; i < nums.length; i++) {
            int complement = target - nums[i];
            if(mapper.containsKey(complement))
                return new int[] {mapper.get(complement), i};
            mapper.put(nums[i], i);
        }
        throw new IllegalArgumentException();
    }
}

/*One -pass hashtable
- Interate and insert elements into the table, we can also look back and check if the current elements complement already exists in the table.
- Time Complexity - O(n) - We traverse the list containing n elements only once. Each lookup in the table costs only O(1) time.
- Space Complexity - O(n) - The extra space required depends on the number of items stored in the hash table, which stored at most n elements.
*/
