/* You are given an undirected connected graph. An articulation point (or cut vertex) is defined as a vertex which, when removed along with associated edges, makes the graph disconnected (or more precisely, increases the number of connected components in the graph). The task is to find all articulation points in the given graph. */
//https://leetcode.com/discuss/interview-question/436073/

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class practise {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] edges = {{0, 1}, {0, 2}, {1, 3}, {2, 3}, 
				{2, 5}, {5, 6}, {3, 4}};
		int  numNode = 7, numEdges = 7;
		List<List<Integer>> result = new ArrayList<>();		
		List<Integer>[] graph = new ArrayList[numNode];
		for(int i = 0; i < numNode; i++) {
			graph[i] = new ArrayList<>();
		}
		
		for(int[] edge: edges) {
			graph[edge[0]].add(edge[1]);
			graph[edge[1]].add(edge[0]);
		}
		
		int time = 0;
		int[] disc = new int[numNode];
		int[] low = new int[numNode];
		boolean[] visited = new boolean[numNode];
		
		for(int i = 0; i < numNode; i++) {
			if(!visited[i]) {
				dfs(i, -1, disc, low, visited, graph, result, time);
			}
		}
//		System.out.println(result);
		List<Integer> criticalRouters = new ArrayList<>();
		for(List<Integer> con : result) {
			criticalRouters.add(con.get(0));
		}
		Collections.sort(criticalRouters);
		System.out.println(criticalRouters);
	}
	
	private static void dfs(int root, int parent, int[] disc, int[] low, boolean[] visited, List<Integer>[] graph, List<List<Integer>> result, int time) {
		visited[root] = true;
		disc[root] = time++;
		low[root] = disc[root];
		
		for(Integer n: graph[root]) {
			if(n == parent) continue;
			
			if(!visited[n]) {
				dfs(n, root, disc, low, visited, graph, result, time);
				low[root] = Math.min(low[root], low[n]);
				if(disc[root] < low[n]) {
					result.add(Arrays.asList(root, n));
				}
			} else {
				low[root] = Math.min(low[root], low[n]);
			}
		}
	}
}

/* Complexity analysis of array-based implementation
E = total number of edges = connections.size()
V = total number of vertices = n
Time Complexity = O(V + E)
Space Complexity = O(V + E)
*/
