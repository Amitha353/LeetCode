class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        int result = 0;
        for(int i = 0; i < n; i++) {
            result = Math.max(result, dfs(i, manager, informTime));
        }
        return result;
    }
    public int dfs(int idx, int[] manager, int[] informTime) {
        if(manager[idx] != -1) {
            informTime[idx]+= dfs(manager[idx], manager, informTime);
            manager[idx] = -1;
        }
        return informTime[idx];
    }
}

/*
Time Complexity - O(N)
Space Complexity - O(N)

Bottom-up DFS
Code Trace:
n = 4, headId = 2, manager = [3, 3, -1, 2] , informTime = [0, 0, 162, 914]
-----------------------
I. i = 0, result = 0
dfs(0, [3, 3, -1, 2], [0, 0, 162, 914])
manager[0] = 3;
informTime[0] = 0 + dfs(3, [3, 3, -1, 2], [0, 0, 162, 914])
    --------------------
    dfs(3, [3, 3, -1, 2], [0, 0, 162, 914])
    manager[3] = 2
    informTime[3] = 914 + dfs(2, [3, 3, -1, 2], [0, 0, 162, 914])
        ------------------------------------------------
        dfs(2, [3, 3, -1, 2], [0, 0, 162, 914])
        manager[2] = -1//since -1
        return informTime[2] // 162
        ------------------------------------------------
    informTime[3] = 914+162 = 1076
    manager[3] = -1
    return informTime[3] //1076
    ------------------------------------------
informTime[0] = 0 + 1076//1076
manager[0] = -1;
return informTime[0] //1076
--------------------------------
result = Max(0, 1076) = 1076
-------------------------------------
*/
